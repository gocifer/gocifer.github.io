(window.webpackJsonp=window.webpackJsonp||[]).push([[63],{477:function(e,t,n){"use strict";n.r(t);var a=n(6),s=Object(a.a)({},(function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[n("h1",{attrs:{id:"vim-扩展"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#vim-扩展"}},[e._v("#")]),e._v(" vim 扩展")]),e._v(" "),n("p",[e._v("[toc]")]),e._v(" "),n("h1",{attrs:{id:"git"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#git"}},[e._v("#")]),e._v(" git")]),e._v(" "),n("blockquote",[n("p",[e._v("https://gitee.com/blinderjay/firstblood")])]),e._v(" "),n("p",[e._v("git add 文件名 //添加一个文件到git index\ngit commit -m “代码提交信息” //提交\ngit push -u origin master //上传到远程\nls //查看当前目录\ngit status //查看状态")]),e._v(" "),n("h1",{attrs:{id:"linux下安装git"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#linux下安装git"}},[e._v("#")]),e._v(" Linux下安装Git")]),e._v(" "),n("h2",{attrs:{id:"_1-安装git"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_1-安装git"}},[e._v("#")]),e._v(" 1. 安装Git")]),e._v(" "),n("p",[e._v("1.1 Ubuntu12.04下\n可以使用apt-get方式安装，也可以下载源代码安装【1】，我们这里使用apt-git安装。")]),e._v(" "),n("p",[e._v("但由于直接使用 sudo apt-get install git 安装的版本较老，因此我们参考【2】中给出的PPA源。")]),e._v(" "),n("p",[e._v("sudo add-apt-repository ppa:git-core/ppa\nsudo apt-get update\nsudo apt-get install git\n安装完成后，检查是否安装成功")]),e._v(" "),n("p",[e._v("git --version\n显示 git version 2.1.1，表明安装成功。")]),e._v(" "),n("p",[e._v("1.2 CentOS6.6下\n在CentOS5的时代，由于yum源中没有git，所以需要预先安装一系列的依赖包。但在CentOS6的yum源中已经有git的版本了，可以直接使用yum源进行安装。")]),e._v(" "),n("p",[e._v("$ sudo yum install git\n但是yum源中安装的git版本是1.7.1，太老了，Github等需要的Git版本最低都不能低于1.7.2 。所以我们一般不用上面的方法。而是下载git源码，编译安装。")]),e._v(" "),n("p",[e._v("编译安装的步骤是【4】：")]),e._v(" "),n("p",[e._v("（1）首先先更新系统")]),e._v(" "),n("p",[e._v("sudo yum update\n（2）安装依赖的包")]),e._v(" "),n("p",[e._v("sudo yum install curl-devel expat-devel gettext-devel openssl-devel zlib-devel gcc perl-ExtUtils-MakeMaker\n（3）下载git源码并解压缩")]),e._v(" "),n("p",[e._v("$ wget https://github.com/git/git/archive/v2.3.0.zip\n$ unzip v2.3.0.zip\n$ cd git-2.3.0\n（4）编译安装")]),e._v(" "),n("p",[e._v("将其安装在“/usr/local/git”目录下。")]),e._v(" "),n("p",[e._v('make prefix=/usr/local/git all\nsudo make prefix=/usr/local/git install\n（5）此时你如果使用git --version 查看git版本的话，发现git仍然是1.7.1版本。这是因为它默认使用了"/usr/bin"下的git。')]),e._v(" "),n("p",[e._v("你可以用下面的命令查看git所在的路径：")]),e._v(" "),n("p",[e._v('$ whereis git\ngit: /usr/bin/git /usr/local/git /usr/share/man/man1/git.1.gz\n（6）我们要把编译安装的git路径放到环境变量里，让它替换"/usr/bin"下的git。为此我们可以修改“/etc/profile”文件（或者/etc/bashrc文件）。')]),e._v(" "),n("p",[e._v("sudo vim /etc/profile\n然后在文件的最后一行，添加下面的内容，然后保存退出。")]),e._v(" "),n("p",[e._v("export PATH=/usr/local/git/bin:$PATH\n（7）使用source命令应用修改。")]),e._v(" "),n("p",[e._v("source /etc/profile\n（8）然后再次使用git --version 查看git版本，发现输出2.3.0，表明安装成功。")]),e._v(" "),n("h2",{attrs:{id:"_2-设置git"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2-设置git"}},[e._v("#")]),e._v(" 2. 设置Git")]),e._v(" "),n("p",[e._v("（1）设置用户名和email。")]),e._v(" "),n("p",[e._v('git config --global user.name "Your Name"\ngit config --global user.email "youremail@domain.com"\n此时，Home目录下会新建一个.gitconfig文件')]),e._v(" "),n("h2",{attrs:{id:"_3-为github账号添加ssh-keys"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_3-为github账号添加ssh-keys"}},[e._v("#")]),e._v(" 3. 为GitHub账号添加SSH Keys")]),e._v(" "),n("p",[e._v("以公钥认证方式访问SSH协议的Git服务器时无需输入口令，而且更安全。（访问HTTP协议的Git服务器时，比如提交修改，每次都需要输入口令。）")]),e._v(" "),n("p",[e._v("（1）创建SSH key")]),e._v(" "),n("p",[e._v('$ ssh-keygen -t rsa -C "youremail@163.com"\n系统会提示key的保存位置（一般是~/.ssh目录）和指定口令，保持默认，连续三次回车即可。')]),e._v(" "),n("p",[e._v("（2）Copy SSH Key")]),e._v(" "),n("p",[e._v("然后用vim打开该文件，id_rsa.pub文件内的内容，粘帖到github帐号管理的添加SSH key界面中。")]),e._v(" "),n("p",[e._v("vim ~/.ssh/id_rsa.pub\n（3）添加到GitHub")]),e._v(" "),n("p",[e._v("登录github-> Accounting settings图标-> SSH key-> Add SSH key-> 填写SSH key的名称（可以起一个自己容易区分的），然后将拷贝的~/.ssh/id_rsa.pub文件内容粘帖-> add key”按钮添加。")]),e._v(" "),n("p",[e._v("（4）测试")]),e._v(" "),n("p",[e._v("ssh -T git@github.com")]),e._v(" "),n("h2",{attrs:{id:"_4-为github上的repository提交修改"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_4-为github上的repository提交修改"}},[e._v("#")]),e._v(" 4. 为GitHub上的Repository提交修改")]),e._v(" "),n("p",[e._v("（1）git clone已存在GitHub上的Repository。（在新建的~/MyTestFolder目录中）")]),e._v(" "),n("p",[e._v("git clone https://github.com/zhchnchn/ZhchnchnTest.git\n（2）修改一个文件，然后提交")]),e._v(" "),n("p",[e._v('vim README.md\ngit status\ngit add README.md\ngit status\ngit commit -m "Edit by WorkUbuntu 1204"\ngit status\ngit remote add origin https://github.com/zhchnchn/ZhchnchnTest.git\n这时会报错误：')]),e._v(" "),n("p",[e._v("fatal: remote origin already exists.")]),e._v(" "),n("p",[e._v("解决办法【3】：")]),e._v(" "),n("p",[e._v("$ git remote rm origin\n然后再次执行 git remote add origin https://github.com/zhchnchn/ZhchnchnTest.git")]),e._v(" "),n("p",[e._v("（3）之后，需要将修改push到GitHub上")]),e._v(" "),n("p",[e._v("git push -u origin master\n执行该条命令后，会要求输入GitHub账户的用户名和密码。")]),e._v(" "),n("p",[e._v("（4）提交完成后，查看GitHub上的Repository，会发现内容修改成功。")]),e._v(" "),n("h1",{attrs:{id:"pluginmanager-list"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#pluginmanager-list"}},[e._v("#")]),e._v(" PluginManager[^list]")]),e._v(" "),n("h2",{attrs:{id:"vundle"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#vundle"}},[e._v("#")]),e._v(" vundle")]),e._v(" "),n("p",[e._v("Vundle可以通过一个命令安装所有的插件，一个命令给所有的插件升级。而要安装的插件则都写在vim的配置文件里，所以看起来一目了然，更方便管理。Vundle的官方README里面有详细的安装指南，这里简单介绍一下配置过程。")]),e._v(" "),n("p",[e._v("首先自然是先去项目主页下载好插件。放到.vim/bundle目录中。可以使用以下命令安装：")]),e._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("$ git clone https://github.com/VundleVim/Vundle.vim.git ~/.vim/bundle/Vundle.vim\n")])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br")])]),n("p",[e._v("然后在自己的配置文件里面加上下面的语句，启用Vundle：")]),e._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('set nocompatible " be iMproved\nfiletype off " required!\nset rtp+=~/.vim/bundle/vundle/\ncall vundle#rc()\n')])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br"),n("span",{staticClass:"line-number"},[e._v("2")]),n("br"),n("span",{staticClass:"line-number"},[e._v("3")]),n("br"),n("span",{staticClass:"line-number"},[e._v("4")]),n("br")])]),n("p",[e._v('接下来就能在配置文件中指定安装哪些插件了，Vundle支持三种格式，具体见下面的配置：\n" 使用Vundle来管理Vundle，这个必须要有。')]),e._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("Bundle 'gmarik/vundle'\n")])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br")])]),n("p",[e._v('"接下来是要安装的插件')]),e._v(" "),n("p",[e._v('"格式1：Github上其他用户的仓库（非vim-scripts账户里的仓库，所以要加Github用户名）')]),e._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("Bundle 'tpope/vim-fugitive'\nBundle 'tpope/vim-rails.git'\n")])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br"),n("span",{staticClass:"line-number"},[e._v("2")]),n("br")])]),n("p",[e._v('"格式2：vim-scripts里面的仓库，直接打仓库名即可。')]),e._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("Bundle 'L9'\nBundle 'FuzzyFinder'\n")])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br"),n("span",{staticClass:"line-number"},[e._v("2")]),n("br")])]),n("p",[e._v('"格式3：非Github的Git仓库')]),e._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("Bundle 'git://vim-latex.git.sourceforge.net/gitroot/vim-latex/vim-latex'\n")])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br")])]),n("p",[e._v("最后在所有Bundle命令后面加上文件类型检测：")]),e._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("filetype plugin indent on\n")])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br")])]),n("p",[e._v("大功告成，在vim里面输入"),n("code",[e._v(":BundleInstall")]),e._v("命令后Vundle就会自动帮你把所有的插件装好。而:BundleInstall!命令则会自动升级所有插件。或者直接在终端输入"),n("code",[e._v("vim +BundleInstall +qall")])]),e._v(" "),n("p",[e._v("你也可以使用Vundle手动管理插件，例如我写了一个mytemplates插件，并放到了.vim/myplugin目录中，那么可以在vim的配置文件中加入下面的命令：\nset rtp+=~/.vim/myplugin/mytemplates/这样Vunlde就会自动去myplugin目录中载入mytempaltes插件。")]),e._v(" "),n("p",[e._v("现在，我可以用.vimrc来管理所有的插件了。😃")]),e._v(" "),n("p",[e._v("备注：Vundle的其他操作\n更新插件:BundleUpdate\n清除不再使用的插件:BundleClean（就是删除Vundle目录中的插件，但是.vimrc中没有添加配置的插件）\n列出所有插件:BundleList\n查找插件:BundleSearch")]),e._v(" "),n("h3",{attrs:{id:"出错提示"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#出错提示"}},[e._v("#")]),e._v(" 出错提示")]),e._v(" "),n("p",[e._v("如果在安装完插件后启动 vim 出现如下提示，则说明你的 vim 需要升级。\n"),n("code",[e._v("YouCompleteMe unavailable: requires Vim 7.4.1578+.")])]),e._v(" "),n("p",[e._v("如果在安装完插件后启动 vim 出现如下提示，则说明你的 vim 需要重新编译以支持 Python。\n"),n("code",[e._v("YouCompleteMe unavailable: requires Vim compiled with Python (2.6+ or 3.3+) support")])]),e._v(" "),n("h2",{attrs:{id:"pathogen"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#pathogen"}},[e._v("#")]),e._v(" pathogen")]),e._v(" "),n("h3",{attrs:{id:"一、pathogen简介"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#一、pathogen简介"}},[e._v("#")]),e._v(" 一、pathogen简介")]),e._v(" "),n("p",[e._v("通常情况下安装vim插件，通常是将所有的插件和相关的doc文件都安装在中一文件夹中，如将插件全部安装在/usr/share/vim/vim73/plugin/目录下，将帮助文档全部安装在/usr/share/vim/vim73/doc/目录下。这样做带来的后果是修改和卸载插件很麻烦，很难弄清楚哪个文件属于哪个插件。")]),e._v(" "),n("p",[e._v("如果用pathogen来管理插件的话，就会变得方便很多了。pathogen让每个插件占有一个单独的目录，解决了文件分散的问题。安装完pathogen之后，只需要在~/.vim/目录下新建一个目录~/.vim/bundle/，并将要安装的所有插件放在~/.vim/bundle/目录下即可以使用。如果要删除某个插件，只需要将~/.vim/bundle/目录下对应的插件目录删除即可。如果想保持某个插件为最新版本，直接从插件的仓库checkout一份代码到bundle目录即可。")]),e._v(" "),n("h3",{attrs:{id:"二、安装pathogen"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#二、安装pathogen"}},[e._v("#")]),e._v(" 二、安装pathogen")]),e._v(" "),n("ol",[n("li",[e._v("准备工作\n创建.vim目录，以及其下的autoload和bundle目录。（如果先前已有.vim目录，可以先备份一下）")])]),e._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("$ mkdir ~/.vim/\n$ mkdir ~/.vim/{autoload,bundle}\n$ cd ~/.vim/\n$ git init\n如果Ubuntu中没有安装Git,需要首先安装Git。\n")])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br"),n("span",{staticClass:"line-number"},[e._v("2")]),n("br"),n("span",{staticClass:"line-number"},[e._v("3")]),n("br"),n("span",{staticClass:"line-number"},[e._v("4")]),n("br"),n("span",{staticClass:"line-number"},[e._v("5")]),n("br")])]),n("ol",{attrs:{start:"2"}},[n("li",[e._v("安装pathogen")])]),e._v(" "),n("blockquote",[n("p",[e._v("referred from:https://www.cnblogs.com/zhcncn/p/4030576.html")])]),e._v(" "),n("p",[e._v("下载"),n("a",{attrs:{href:"https://github.com/tpope/vim-pathogen",target:"_blank",rel:"noopener noreferrer"}},[e._v("vim-pathogen"),n("OutboundLink")],1),e._v("，将zip包中autoload下的pathogen.vim文件copy到 ~/.vim/autoload文件夹下。")]),e._v(" "),n("p",[e._v("###三、启用pathogen\n然后添加下面的命令到~/.vimrc文件中（.vimrc文件不存在的话，先创建.vimrc文件）。")]),e._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("call pathogen#infect()\ncall pathogen#helptags()\nnnoremap <leader>v <Plug>TaskList\nsyntax on\nfiletype plugin indent on\n")])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br"),n("span",{staticClass:"line-number"},[e._v("2")]),n("br"),n("span",{staticClass:"line-number"},[e._v("3")]),n("br"),n("span",{staticClass:"line-number"},[e._v("4")]),n("br"),n("span",{staticClass:"line-number"},[e._v("5")]),n("br")])]),n("p",[e._v("注：这里需要说明一下，该插件不能放到/usr/share/vim/vim73/目录下，而只能放到~/.vim/目录下。要启用pathogen也只能修改~/.vimrc，而不能修改/etc/vimrc (Ubuntu下一般只需要修改~/.vimrc即可。如果使用Fedora，当以root用户打开vim时，如果要使插件或对VIM的配置生效，则需要修改/etc/vimrc文件)。")]),e._v(" "),n("p",[e._v("很多插件还带有自己的说明文档（doc目录中），只要执行一下命令vim输入"),n("code",[e._v(":call pathogen#helptags()")]),e._v("即可。\npathogen就可以自动为bundle目录下所有的doc目录中的txt文件生成帮助文档标签。")]),e._v(" "),n("h3",{attrs:{id:"四、安装新插件"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#四、安装新插件"}},[e._v("#")]),e._v(" 四、安装新插件")]),e._v(" "),n("p",[e._v("到目前为止，pathogen已经启用，要安装新插件，只需要下载该插件，并将其放到~/.vim/bundle/目录下即可。")]),e._v(" "),n("p",[e._v("1、安装NERDTree")]),e._v(" "),n("p",[e._v("例如，要下载安装NERDTree插件，只需要进入到~/.vim/bundle/目录，然后执行以下命令：\n"),n("code",[e._v("git clone http://github.com/scrooloose/nerdtree.git")])]),e._v(" "),n("p",[e._v("下载完成后，会看到~/.vim/bundle/目录下会多出一个新的目录：nerdtree")]),e._v(" "),n("p",[e._v("OK！NERDTree插件已经安装完成了！可以看到这种方式比传统的vim插件安装方式简单多了！\n而要卸载该插件也非常简单，只需要在~/.vim/bundle/目录下删除nerdtree目录即可，干净利落！")]),e._v(" "),n("p",[e._v("要更新该插件到最新版本，只需要进入到该目录~/.vim/bundle/nerdtree/，并执行以下命令：\n"),n("code",[e._v("git pull origin")]),e._v("\n当然这种安装和更新插件的方法只适用于代码仓库支持git的方法。\n对于无法用git下载的插件，就更新bundle里的那个以插件名为名的目录就好。")]),e._v(" "),n("p",[e._v("2、安装tagbar\ntagbar可以做为taglist的替代者，在~/.vim/bundle/目录执行安装命令如下：\n"),n("code",[e._v("git clone https://github.com/majutsushi/tagbar.git")])]),e._v(" "),n("p",[e._v("之后同样可以在vimrc文件中设置快捷键：")]),e._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('nmap <F4> :TagbarToggle<CR>   "设置快捷键  \nlet g:tagbar_width = 40       "设置宽度，默认为40  \nautocmd VimEnter * nested :call tagbar#autoopen(1)    "打开vim时自动打开  \ntagbarlet g:tagbar_left = 1         "在左侧"  \nlet g:tagbar_right = 1        "在右侧  \n')])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br"),n("span",{staticClass:"line-number"},[e._v("2")]),n("br"),n("span",{staticClass:"line-number"},[e._v("3")]),n("br"),n("span",{staticClass:"line-number"},[e._v("4")]),n("br"),n("span",{staticClass:"line-number"},[e._v("5")]),n("br")])]),n("p",[e._v("列举几点比taglist优化了的地方：\n(1)支持头文件的函数列表显示\ntagbar对函数的可见级别也是做了区分的，分别用+ - # 并配合着色来做了区分。\n(2)对面向对象的支持更好\ntaglist虽然也会列出类列表，但是整体还是很不直观。\n(3)自动根据文件修改时间来重建\ntaglist在这一点上体验就很不好，其实明明可以通过这种时间戳的方式来实现。\n（据说tagbar最好配置ctags使用，效果会更好）")]),e._v(" "),n("h3",{attrs:{id:"五、c-vim-与-pathogen-vim-的兼容问题"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#五、c-vim-与-pathogen-vim-的兼容问题"}},[e._v("#")]),e._v(" 五、c.vim 与 pathogen.vim 的兼容问题")]),e._v(" "),n("p",[e._v("pathogen与大部分插件都很兼容，但有少部分插件在使用pathogen管理时会出现问题。例如，C&C++程序员用得非常多的插件c.vim（C/C++ IDE -- Write and run programs. Insert statements, idioms, comments etc）。当将此插件安装到bundle/cvim/目录下后，打开Vim，会弹出\"Global template file '.s:C_GlobalTemplateFile.' not readable.\"的警告。要解决这个问题，只需要将此插件的c.vim文件（在plugin目录下）的69行：\nlet s:plugin_dir   = $VIM.'/vimfiles/'\n修改为：\nlet s:plugin_dir   = $VIM.'/vimfiles/bundle/cvim/'\n即可。")]),e._v(" "),n("h3",{attrs:{id:"六、pathogen-vim-与-vimball"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#六、pathogen-vim-与-vimball"}},[e._v("#")]),e._v(" 六、pathogen.vim 与 vimball")]),e._v(" "),n("p",[e._v("有些插件是以vimball的方式发布的（打包成.vba格式），如果按照常规的安装方式，即用Vim打开vba文件，然后执行命令：\n:so %\n那么，插件的文件还是被解压到vimfiles目录下，而非bundle目录。当然，我们可以用\n:RmVimball pluginname\n命令来卸载vba格式的插件。\n然而，如果我们仍然想用pathogen来管理vba格式的插件，那么可以依照以下步骤操作：\n:edit name.vba\n:!mkdir $VIM\\vimfiles\\bundle\\name\n:UseVimball "),n("mjx-container",{staticClass:"MathJax",attrs:{jax:"CHTML"}},[n("mjx-math",{staticClass:" MJX-TEX"},[n("mjx-mi",{staticClass:"mjx-i"},[n("mjx-c",{attrs:{c:"V"}})],1),n("mjx-mi",{staticClass:"mjx-i"},[n("mjx-c",{attrs:{c:"I"}})],1),n("mjx-mi",{staticClass:"mjx-i"},[n("mjx-c",{attrs:{c:"M"}})],1),n("mjx-mtext",{staticClass:"mjx-n",staticStyle:{color:"red"}},[n("mjx-c",{attrs:{c:"5C"}}),n("mjx-c",{attrs:{c:"v"}}),n("mjx-c",{attrs:{c:"i"}}),n("mjx-c",{attrs:{c:"m"}}),n("mjx-c",{attrs:{c:"f"}}),n("mjx-c",{attrs:{c:"i"}}),n("mjx-c",{attrs:{c:"l"}}),n("mjx-c",{attrs:{c:"e"}}),n("mjx-c",{attrs:{c:"s"}})],1),n("mjx-mtext",{staticClass:"mjx-n",staticStyle:{color:"red"}},[n("mjx-c",{attrs:{c:"5C"}}),n("mjx-c",{attrs:{c:"b"}}),n("mjx-c",{attrs:{c:"u"}}),n("mjx-c",{attrs:{c:"n"}}),n("mjx-c",{attrs:{c:"d"}}),n("mjx-c",{attrs:{c:"l"}}),n("mjx-c",{attrs:{c:"e"}})],1),n("mjx-mtext",{staticClass:"mjx-n",staticStyle:{color:"red"}},[n("mjx-c",{attrs:{c:"5C"}}),n("mjx-c",{attrs:{c:"n"}}),n("mjx-c",{attrs:{c:"a"}}),n("mjx-c",{attrs:{c:"m"}}),n("mjx-c",{attrs:{c:"e"}})],1),n("mjx-mo",{staticClass:"mjx-n",attrs:{space:"4"}},[n("mjx-utext",{staticStyle:{"font-family":"serif"},attrs:{variant:"normal"}},[e._v("这")]),n("mjx-utext",{staticStyle:{"font-family":"serif"},attrs:{variant:"normal"}},[e._v("样")]),n("mjx-utext",{staticStyle:{"font-family":"serif"},attrs:{variant:"normal"}},[e._v("，")])],1),n("mjx-mi",{staticClass:"mjx-i",attrs:{space:"4"}},[n("mjx-c",{attrs:{c:"n"}})],1),n("mjx-mi",{staticClass:"mjx-i"},[n("mjx-c",{attrs:{c:"a"}})],1),n("mjx-mi",{staticClass:"mjx-i"},[n("mjx-c",{attrs:{c:"m"}})],1),n("mjx-mi",{staticClass:"mjx-i"},[n("mjx-c",{attrs:{c:"e"}})],1),n("mjx-mo",{staticClass:"mjx-n",attrs:{space:"4"}},[n("mjx-utext",{staticStyle:{"font-family":"serif"},attrs:{variant:"normal"}},[e._v("插")]),n("mjx-utext",{staticStyle:{"font-family":"serif"},attrs:{variant:"normal"}},[e._v("件")]),n("mjx-utext",{staticStyle:{"font-family":"serif"},attrs:{variant:"normal"}},[e._v("的")]),n("mjx-utext",{staticStyle:{"font-family":"serif"},attrs:{variant:"normal"}},[e._v("文")]),n("mjx-utext",{staticStyle:{"font-family":"serif"},attrs:{variant:"normal"}},[e._v("件")]),n("mjx-utext",{staticStyle:{"font-family":"serif"},attrs:{variant:"normal"}},[e._v("就")]),n("mjx-utext",{staticStyle:{"font-family":"serif"},attrs:{variant:"normal"}},[e._v("都")]),n("mjx-utext",{staticStyle:{"font-family":"serif"},attrs:{variant:"normal"}},[e._v("被")]),n("mjx-utext",{staticStyle:{"font-family":"serif"},attrs:{variant:"normal"}},[e._v("解")]),n("mjx-utext",{staticStyle:{"font-family":"serif"},attrs:{variant:"normal"}},[e._v("压")]),n("mjx-utext",{staticStyle:{"font-family":"serif"},attrs:{variant:"normal"}},[e._v("到")])],1)],1)],1),e._v("VIM\\vimfiles\\bundle\\name 目录下，且自动\n执行了helptags命令。")],1),e._v(" "),n("h1",{attrs:{id:"java-ide-list"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#java-ide-list"}},[e._v("#")]),e._v(" Java IDE[^list]")]),e._v(" "),n("h2",{attrs:{id:"目录树的创建"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#目录树的创建"}},[e._v("#")]),e._v(" 目录树的创建")]),e._v(" "),n("p",[e._v("开发的时候")]),e._v(" "),n("ul",[n("li",[e._v("首先建立 Troy(工程名文件夹)，在 Troy 下建立 bin / lib / src 三个文件夹， Java 就是第三方 jar 包多，统统都放到 lib 目录下。")]),e._v(" "),n("li",[e._v("然后在 src 目录下 自己建立包名，这里演示是 part2, 进入到 part2 目录建立一个 HelloWorld.java 文件")]),e._v(" "),n("li",[e._v("相对来说，这样的目录结构对于 Java 开发是很清晰的，class文件 / Java文件 / jar文件都归类存放。")]),e._v(" "),n("li",[e._v("这里需要注意的是，有主方法，也就是 main 方法的 java 文件的 package 必须和我们文件夹的名字一样。即，这里的 HelloWorld，有主方法，所在文件夹是 part2 ，第一行必须是 package part2，不能更改其它名字。如果是没有主方法的类，则 package 其它的名字也可以。这个也是为了配合 VIM 的特性和 Java 命令，需要注意的地方。\n##关于 Javac 和 Java")]),e._v(" "),n("li",[e._v("这里会遇到一个很大的问题（尤其是一开始就使用 Eclipse 或者 MyEclipse 或者其它 IDE 开发的同学），那就是 javac 命令编译 java 命令的问题。")]),e._v(" "),n("li",[e._v("如果说把所有文件都堆到一个文件夹里去做 Java 开发，那也就完全没有问题。\n"),n("code",[e._v("javac *.java 搞定！")])]),e._v(" "),n("li",[e._v("问题就出在，我们需要一个良好的目录结构，即上一部分讲到的目录结构。\n请问，如何编译 java 文件，才能即引入 lib 中的第三方 jar 包，又让 编译产生的所有 class 都在 bin 目录下？")])]),e._v(" "),n("hr"),e._v(" "),n("p",[e._v("答案涉及 javac 的参数问题\n先看编译命令：\n"),n("code",[e._v("javac -cp ../../lib:../../bin -Djava.ext.dirs=../../lib -d ../../bin HelloWorld.java")])]),e._v(" "),n("ul",[n("li",[e._v("这里由于使用的系统是 Ubuntu ，所以目录之间使用的是 ：冒号隔开，如果是 windows ，请自行替为 ; 分号")]),e._v(" "),n("li",[e._v("-cp ../../lib:../../bin  编译过程中需要引入 class 所在的文件夹的路径，linux用 冒号 分隔，windows 用 分号 分隔")]),e._v(" "),n("li",[e._v("-Djava.ext.dirs=../../bin 告诉系统，引入的第三方 jar 包存放的目录，如有引用第三方 jar 包编译时会通过此参数到相应的路径下查找")]),e._v(" "),n("li",[e._v("-d ../../bin 编译后的 class 文件都存放到 ../../bin 目录，也就是 bin 目录下")])]),e._v(" "),n("p",[e._v("当通过编译后，bin 目录下，会出现一个 part2 文件夹，里面是 HelloWorld.class\n然后是运行命令：\n"),n("code",[e._v("java -cp ../../bin -Djava.ext.dirs=../../lib part2.HelloWorld")])]),e._v(" "),n("ul",[n("li",[e._v("这里也需要指定 class 的目录，jar 包的目录。特别需要注意的是 包名 part2.HelloWorld ，单单写 HelloWorld 则运行出错。")]),e._v(" "),n("li",[e._v("还有一个注意点就是，上面的 ../../bin 写的是相对路径，相当于写死了。相对的是 HelloWorld 所在的目录，我们工作的目录一定要转移到 part2 目录中。把 part2 作为当前目录。当然，如果也可以选择 part3 ，也可以是你所建立的任何名字的文件夹。")])]),e._v(" "),n("h1",{attrs:{id:"plugin-list"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#plugin-list"}},[e._v("#")]),e._v(" Plugin[^list]")]),e._v(" "),n("h2",{attrs:{id:"nerdtree"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#nerdtree"}},[e._v("#")]),e._v(" NerdTree")]),e._v(" "),n("p",[e._v("～/.vimrc 中添加如下代码：")]),e._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('" About NERDTree  \nnoremap :NERDTreeToggle  \nautocmd vimenter * if !argc() | NERDTree | endif  "open a NERDTree automatically when vim starts up if no files were specified  \nautocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTreeType") && b:NERDTreeType == "primary") | q | endif  \n')])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br"),n("span",{staticClass:"line-number"},[e._v("2")]),n("br"),n("span",{staticClass:"line-number"},[e._v("3")]),n("br"),n("span",{staticClass:"line-number"},[e._v("4")]),n("br")])]),n("p",[e._v("之后，按 F2 便可呼出 NerdTree ，一般打开 Java 文件后，NerdTree 固定在窗口左侧，可按 F2 关闭。")]),e._v(" "),n("p",[n("strong",[e._v("在NERDTree操作区的一些基本操作：")]),e._v("\n?: 快速帮助文档\no: 打开一个目录或者打开文件，创建的是buffer，也可以用来打开书签\ngo: 打开一个文件，但是光标仍然留在NERDTree，创建的是buffer\nt: 打开一个文件，创建的是Tab，对书签同样生效\nT: 打开一个文件，但是光标仍然留在NERDTree，创建的是Tab，对书签同样生效\ni: 水平分割创建文件的窗口，创建的是buffer\ngi: 水平分割创建文件的窗口，但是光标仍然留在NERDTree\ns: 垂直分割创建文件的窗口，创建的是buffer\ngs: 和gi，go类似\nx: 收起当前打开的目录\nX: 收起所有打开的目录\ne: 以文件管理的方式打开选中的目录\nD: 删除书签\nP: 大写，跳转到当前根路径\np: 小写，跳转到光标所在的上一级路径\nK: 跳转到第一个子路径\nJ: 跳转到最后一个子路径\n"),n("C-j",[e._v("和"),n("C-k",[e._v(": 在同级目录和文件间移动，忽略子目录和子文件\nC: 将根路径设置为光标所在的目录\nu: 设置上级目录为根路径\nU: 设置上级目录为跟路径，但是维持原来目录打开的状态\nr: 刷新光标所在的目录\nR: 刷新当前根路径\nI: 显示或者不显示隐藏文件\nf: 打开和关闭文件过滤器\nq: 关闭NERDTree\nA: 全屏显示NERDTree，或者关闭全屏")])],1)],1),e._v(" "),n("h3",{attrs:{id:"nerdtree-快捷键辑录"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#nerdtree-快捷键辑录"}},[e._v("#")]),e._v(" NERDTree 快捷键辑录")]),e._v(" "),n("p",[e._v("参看连接：http://www.cnblogs.com/lexus/archive/2012/11/04/2753187.html")]),e._v(" "),n("ul",[n("li",[e._v("切换工作台和目录\nctrl + w + h    光标 focus 左侧树形目录\nctrl + w + l    光标 focus 右侧文件显示窗口\nctrl + w + w    光标自动在左右侧窗口切换\nctrl + w + r    移动当前窗口的布局位置\no       在已有窗口中打开文件、目录或书签，并跳到该窗口\ngo      在已有窗口 中打开文件、目录或书签，但不跳到该窗口\nt       在新 Tab 中打开选中文件/书签，并跳到新 Tab\nT       在新 Tab 中打开选中文件/书签，但不跳到新 Tab\ni       split 一个新窗口打开选中文件，并跳到该窗口\ngi      split 一个新窗口打开选中文件，但不跳到该窗口\ns       vsplit 一个新窗口打开选中文件，并跳到该窗口\ngs      vsplit 一个新 窗口打开选中文件，但不跳到该窗口\n!       执行当前文件\nO       递归打开选中 结点下的所有目录\nx       合拢选中结点的父目录\nX       递归 合拢选中结点下的所有目录\ne       Edit the current dif")])]),e._v(" "),n("p",[e._v("双击    相当于 NERDTree-o\n中键    对文件相当于 NERDTree-i，对目录相当于 NERDTree-e")]),e._v(" "),n("p",[e._v("D       删除当前书签")]),e._v(" "),n("p",[e._v("P       跳到根结点\np       跳到父结点\nK       跳到当前目录下同级的第一个结点\nJ       跳到当前目录下同级的最后一个结点\nk       跳到当前目录下同级的前一个结点\nj       跳到当前目录下同级的后一个结点")]),e._v(" "),n("p",[e._v("C       将选中目录或选中文件的父目录设为根结点\nu       将当前根结点的父目录设为根目录，并变成合拢原根结点\nU       将当前根结点的父目录设为根目录，但保持展开原根结点\nr       递归刷新选中目录\nR       递归刷新根结点\nm       显示文件系统菜单\ncd      将 CWD 设为选中目录")]),e._v(" "),n("p",[e._v("I       切换是否显示隐藏文件\nf       切换是否使用文件过滤器\nF       切换是否显示文件\nB       切换是否显示书签")]),e._v(" "),n("p",[e._v("q       关闭 NerdTree 窗口\n?       切换是否显示 Quick Help")]),e._v(" "),n("ul",[n("li",[e._v("切换标签页\n:tabnew [++opt选项] ［＋cmd］ 文件      建立对指定文件新的tab\n:tabc   关闭当前的 tab\n:tabo   关闭所有其他的 tab\n:tabs   查看所有打开的 tab\n:tabp   前一个 tab\n:tabn   后一个 tab")])]),e._v(" "),n("p",[e._v("标准模式下：\ngT      前一个 tab\ngt      后一个 tab")]),e._v(" "),n("p",[e._v("MacVim 还可以借助快捷键来完成 tab 的关闭、切换\ncmd+w   关闭当前的 tab\ncmd+{   前一个 tab\ncmd+}   后一个 tab")]),e._v(" "),n("ul",[n("li",[e._v('NerdTree 在 .vimrc 中的常用配置\n" 在 vim 启动的时候默认开启 NERDTree（autocmd 可以缩写为 au）\nautocmd VimEnter * NERDTree\n" 按下 F2 调出/隐藏 NERDTree\nmap  :silent! NERDTreeToggle\n" 将 NERDTree 的窗口设置在 vim 窗口的右侧（默认为左侧）\nlet NERDTreeWinPos="right"\n" 当打开 NERDTree 窗口时，自动显示 Bookmarks\nlet NERDTreeShowBookmarks=1')])]),e._v(" "),n("h2",{attrs:{id:"syntastic"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#syntastic"}},[e._v("#")]),e._v(" syntastic")]),e._v(" "),n("p",[e._v("how to use after installed :http://blog.jobbole.com/107411/")]),e._v(" "),n("p",[e._v("https://github.com/vim-syntastic/syntastic\nhttps://github.com/vim-syntastic/syntastic/blob/master/doc/syntastic-checkers.txt\nhttps://github.com/vim-syntastic/syntastic/wiki/Syntax-Checker-Guide")]),e._v(" "),n("p",[n("leader",[e._v("d 在 vim 底部显示详细错误描述\nYou can see syntastic's idea of available checkers by running "),n("code",[e._v(":SyntasticInfo")]),e._v("\n:Errors 显示错误面板,展现当前源文件中所有语法相关错误的描述\n:lnext  到下一个错误\n:lprevious 到上一个错误\n:help syntastic-checkers\n:w\t保存后自动显示错误\n:SyntasticCheck 来手动检测错误\n:Errors 打开错误位置列表并使用 "),n("code",[e._v(":lclose")]),e._v(" 来关闭\n:SyntasticReset 可以清除掉错误列表\n:SyntasticToggleMode 来切换激活（在写到 buffer 时检测）和被动（即手动检测）检测错误。”")])],1),e._v(" "),n("h2",{attrs:{id:"airline"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#airline"}},[e._v("#")]),e._v(" airline")]),e._v(" "),n("h3",{attrs:{id:"安装字体"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#安装字体"}},[e._v("#")]),e._v(" 安装字体")]),e._v(" "),n("p",[e._v("Installation\nRun"),n("code",[e._v("./install.sh")]),e._v(" to install all Powerline Fonts or see the documentation for details.")]),e._v(" "),n("p",[e._v("On other environments, you can copy and paste these commands to your terminal. Comments are fine too.")]),e._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("# clone\ngit clone https://github.com/powerline/fonts.git --depth=1\n# install\ncd fonts\n./install.sh\n# clean-up a bit\ncd ..\nrm -rf fonts\nUninstall\nRun ./uninstall.sh to uninstall all Powerline Fonts. You can also copy the quick installation commands changing only the line ./install.sh to ./uninstall.sh.\n")])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br"),n("span",{staticClass:"line-number"},[e._v("2")]),n("br"),n("span",{staticClass:"line-number"},[e._v("3")]),n("br"),n("span",{staticClass:"line-number"},[e._v("4")]),n("br"),n("span",{staticClass:"line-number"},[e._v("5")]),n("br"),n("span",{staticClass:"line-number"},[e._v("6")]),n("br"),n("span",{staticClass:"line-number"},[e._v("7")]),n("br"),n("span",{staticClass:"line-number"},[e._v("8")]),n("br"),n("span",{staticClass:"line-number"},[e._v("9")]),n("br"),n("span",{staticClass:"line-number"},[e._v("10")]),n("br")])]),n("h2",{attrs:{id:"tagbar"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#tagbar"}},[e._v("#")]),e._v(" TagBar")]),e._v(" "),n("p",[e._v("定制呈现内容：https://github.com/majutsushi/tagbar/wiki\nhelp:tagbar\ttagbar的说明文档\n如果在写golang的时候要用到tagbar, 需要安装gotags支持")]),e._v(" "),n("p",[e._v("首先, vim必须是7.0以上\n安装依赖 Exuberant ctags")]),e._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("# ubuntu\nsudo apt-get install ctags\n\n# centos\nsudo yum install ctags\n\n# mac\nbrew install ctags\n")])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br"),n("span",{staticClass:"line-number"},[e._v("2")]),n("br"),n("span",{staticClass:"line-number"},[e._v("3")]),n("br"),n("span",{staticClass:"line-number"},[e._v("4")]),n("br"),n("span",{staticClass:"line-number"},[e._v("5")]),n("br"),n("span",{staticClass:"line-number"},[e._v("6")]),n("br"),n("span",{staticClass:"line-number"},[e._v("7")]),n("br"),n("span",{staticClass:"line-number"},[e._v("8")]),n("br")])]),n("h2",{attrs:{id:"cscope"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#cscope"}},[e._v("#")]),e._v(" cscope")]),e._v(" "),n("h2",{attrs:{id:"ctrlp"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#ctrlp"}},[e._v("#")]),e._v(" ctrlp")]),e._v(" "),n("p",[e._v("https://github.com/kien/ctrlp.vim")]),e._v(" "),n("p",[e._v("启用ctrlp")]),e._v(" "),n("p",[e._v("运行命令:CtrlP或:CtrlP [starting-directory]来以查找文件模式来启用** ctrlp**\n运行命令:CtrlPBuffer或:CtrlPMRU来以查找缓冲或最近打开文件模式来启用ctrlp\n运行命令CtrlPMixed来查找文件、查找缓冲和最近打开文件混合模式来启动** ctrlp**\n基本使用")]),e._v(" "),n("p",[e._v("按"),n("c-f",[e._v("和"),n("c-b",[e._v("在三种查找模式中互相切换\n按"),n("c-y",[e._v("来创建新文件和对应的父目录\n按"),n("c-d",[e._v("来切换到只查找文件名而不是全路径\n按"),n("c-j",[e._v("，"),n("c-k",[e._v("或箭头方向键来移动查找结果列表\n按"),n("c-t",[e._v("或"),n("c-v",[e._v("，"),n("c-x",[e._v("来以新标签或分割窗口的方式来打开文件\n按"),n("c-z",[e._v("来标识或取消标识文件，然后按"),n("c-o",[e._v("来打开文件\n按"),n("c-n",[e._v("，"),n("c-p",[e._v("来在提示历史中选择下一个/上一个字符串")])],1)],1)],1)],1)],1)],1)],1)],1)],1)],1)],1)],1)],1),e._v(" "),n("h2",{attrs:{id:"vim-easymotion"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#vim-easymotion"}},[e._v("#")]),e._v(" vim-easymotion")]),e._v(" "),n("p",[e._v("用法1: 跳转到当前光标前后的位置(w/b)\n快捷键"),n("code",[e._v("<leader><leader>w")]),e._v("(即,,w)和"),n("code",[e._v("<leader><leader>b")]),e._v("(即,,b)\n助记: word and back")]),e._v(" "),n("p",[e._v("用法2: 搜索跳转(s)\n快捷键"),n("leader",[n("leader",[e._v("s(即,,s), 然后输入要搜索的字母, 这个跳转是双向的\n助记: search")])],1)],1),e._v(" "),n("p",[e._v("用法3: 行级跳转(jk)\n配置")]),e._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("map <Leader><Leader>j <Plug>(easymotion-j)\nmap <Leader><Leader>k <Plug>(easymotion-k)\n")])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br"),n("span",{staticClass:"line-number"},[e._v("2")]),n("br")])]),n("p",[e._v("快捷键: "),n("leader",[n("leader",[e._v("j和"),n("leader",[n("leader",[e._v("k(即,,j和,,k)")])],1)],1)],1)],1),e._v(" "),n("p",[e._v("助记: hjkl不解释")]),e._v(" "),n("p",[e._v("用法4: 行内跳转(hl)\n配置")]),e._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("map <Leader><leader>h <Plug>(easymotion-linebackward)\nmap <Leader><leader>l <Plug>(easymotion-lineforward)\n快捷键<leader><leader>h和<leader><leader>l(即,,h和,,l)\n")])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br"),n("span",{staticClass:"line-number"},[e._v("2")]),n("br"),n("span",{staticClass:"line-number"},[e._v("3")]),n("br")])]),n("p",[e._v("助记: hjkl不解释")]),e._v(" "),n("p",[e._v("用法5: 重复上一次动作(.)\n配置")]),e._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("map <Leader><leader>. <Plug>(easymotion-repeat)\n快捷键<leader><leader>.\n")])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br"),n("span",{staticClass:"line-number"},[e._v("2")]),n("br")])]),n("p",[e._v("助记: 同repeat插件....")]),e._v(" "),n("p",[e._v("最终配置")]),e._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('Bundle \'Lokaltog/vim-easymotion\'\nlet g:EasyMotion_smartcase = 1\n"let g:EasyMotion_startofline = 0 " keep cursor colum when JK motion\nmap <Leader><leader>h <Plug>(easymotion-linebackward)\nmap <Leader><Leader>j <Plug>(easymotion-j)\nmap <Leader><Leader>k <Plug>(easymotion-k)\nmap <Leader><leader>l <Plug>(easymotion-lineforward)\n" 重复上一次操作, 类似repeat插件, 很强大\n')])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br"),n("span",{staticClass:"line-number"},[e._v("2")]),n("br"),n("span",{staticClass:"line-number"},[e._v("3")]),n("br"),n("span",{staticClass:"line-number"},[e._v("4")]),n("br"),n("span",{staticClass:"line-number"},[e._v("5")]),n("br"),n("span",{staticClass:"line-number"},[e._v("6")]),n("br"),n("span",{staticClass:"line-number"},[e._v("7")]),n("br"),n("span",{staticClass:"line-number"},[e._v("8")]),n("br")])]),n("p",[e._v("map "),n("Leader",[n("leader",[e._v(". "),n("Plug",[e._v("(easymotion-repeat)\n建议\n还可以"),n("Leader",[n("leader",[e._v("f和"),n("Leader",[n("leader",[e._v("t, 不过建议简单化, 一个"),n("Leader",[n("leader",[e._v("w/b走天下.")])],1)],1)],1)],1)],1)],1)],1)],1)],1),e._v(" "),n("p",[e._v("可以配置2/n个字符的搜索跳转, 更精准, 按需自取(个人觉得太复杂了没必要) 文档和文档")]),e._v(" "),n("h2",{attrs:{id:"ufexplorer"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#ufexplorer"}},[e._v("#")]),e._v(" ufexplorer")]),e._v(" "),n("p",[e._v("\\be打开历史文件列表，\\bv水平新建历史文件列表窗口，\\bs垂直新建历史文件列表")]),e._v(" "),n("h2",{attrs:{id:"win-manger"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#win-manger"}},[e._v("#")]),e._v(" win manger")]),e._v(" "),n("p",[e._v("非必须：")]),e._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("win manger插件要修改下，打开 winmanager/plugins/winmanager.vim ，在文件顶部加入下面的代码：'''[ ]'\nif g:AutoOpenWinManager \nautocmd VimEnter * nested call s:ToggleWindowsManager()|1wincmd w \"vim进入时自动执行 ToggleWindowsManager ，然后移动一次窗口焦点\nendif\n")])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br"),n("span",{staticClass:"line-number"},[e._v("2")]),n("br"),n("span",{staticClass:"line-number"},[e._v("3")]),n("br"),n("span",{staticClass:"line-number"},[e._v("4")]),n("br")])]),n("h2",{attrs:{id:"ultisnips"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#ultisnips"}},[e._v("#")]),e._v(" Ultisnips")]),e._v(" "),n("p",[e._v("类似TextMate的snippets，是一个块补全的插件。除了 Java 还内置了市面上几乎所有流行语言的补全。也可以自定义\n##ctags+cscope")]),e._v(" "),n("h2",{attrs:{id:"vim-commentary-注释代码的插件"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#vim-commentary-注释代码的插件"}},[e._v("#")]),e._v(" vim-commentary:注释代码的插件")]),e._v(" "),n("p",[e._v("块模式：v 命令选中需要注释的内容，gc 注释，取消注释也是同样的步骤。\nV 命令，选中当前行，gc 注释当前正行内容，这个使用是最方便的，也是最多的。\n##netrw\nNetrw插件中常用键绑定有：")]),e._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("<F1>        显示帮助\n<cr>        如果光标下为目录，则进入该目录；如果光标下是文件，则用vim打开该文件\n-           返回上级目录\nc           切换vim的当前工作目录为正在浏览的目录\nd           创建目录 \nD           删除文件或目录\ni           切换显示方式\nR           改名文件或目录\ns           选择排序方式\nx           定制浏览方式，使用你指定的程序打开该文件 \n")])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br"),n("span",{staticClass:"line-number"},[e._v("2")]),n("br"),n("span",{staticClass:"line-number"},[e._v("3")]),n("br"),n("span",{staticClass:"line-number"},[e._v("4")]),n("br"),n("span",{staticClass:"line-number"},[e._v("5")]),n("br"),n("span",{staticClass:"line-number"},[e._v("6")]),n("br"),n("span",{staticClass:"line-number"},[e._v("7")]),n("br"),n("span",{staticClass:"line-number"},[e._v("8")]),n("br"),n("span",{staticClass:"line-number"},[e._v("9")]),n("br"),n("span",{staticClass:"line-number"},[e._v("10")]),n("br")])]),n("h2",{attrs:{id:"identline"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#identline"}},[e._v("#")]),e._v(" identline")]),e._v(" "),n("p",[e._v("https://github.com/Yggdroot/indentLine")]),e._v(" "),n("h2",{attrs:{id:"vim-indent-guides"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#vim-indent-guides"}},[e._v("#")]),e._v(" vim-indent-guides")]),e._v(" "),n("p",[e._v("https://github.com/nathanaelkane/vim-indent-guides\n:help indent-guides")]),e._v(" "),n("h2",{attrs:{id:"vim-gitgutter"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#vim-gitgutter"}},[e._v("#")]),e._v(" vim-gitgutter")]),e._v(" "),n("p",[e._v("https://github.com/airblade/vim-gitgutter")]),e._v(" "),n("h2",{attrs:{id:"plugin-davidhalter-jedi-vim-python的自动补全"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#plugin-davidhalter-jedi-vim-python的自动补全"}},[e._v("#")]),e._v(" Plugin 'davidhalter/jedi-vim'   python的自动补全")]),e._v(" "),n("h2",{attrs:{id:"javacomplete-java-补全插件"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#javacomplete-java-补全插件"}},[e._v("#")]),e._v(" javacomplete: Java 补全插件")]),e._v(" "),n("p",[e._v("可以像 Eclipse 一样提示对象的函数，不过有些时候会提示不出来，不知道为什么。\n##TagHightlight:\n根据生成的Tag文件，高亮类、变量、函数和关键字。")]),e._v(" "),n("h1",{attrs:{id:"geeknote-evernote-supported-list"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#geeknote-evernote-supported-list"}},[e._v("#")]),e._v(" geeknote(evernote supported)[^list]")]),e._v(" "),n("blockquote",[n("p",[e._v("https://github.com/pipakin/geeknote\nhttps://www.linuxidc.com/Linux/2015-01/112421.htm")])]),e._v(" "),n("h2",{attrs:{id:"download-geeknote"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#download-geeknote"}},[e._v("#")]),e._v(" download geeknote")]),e._v(" "),n("ul",[n("li",[e._v("Debian、 Ubuntu 和 Linux Mint")])]),e._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("# Install dependencies. (This example for Debian-based systems):\n$ [sudo] apt-get update; [sudo] apt-get -y install python-setuptools\n\n# Download the repository.\n$ git clone git://github.com/pipakin/geeknote.git\n\n$ cd geeknote\n\n# Installation\n$ [sudo] python[2] setup.py install\n\n# Launch Geeknote and go through login procedure.\n$ geeknote login\n")])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br"),n("span",{staticClass:"line-number"},[e._v("2")]),n("br"),n("span",{staticClass:"line-number"},[e._v("3")]),n("br"),n("span",{staticClass:"line-number"},[e._v("4")]),n("br"),n("span",{staticClass:"line-number"},[e._v("5")]),n("br"),n("span",{staticClass:"line-number"},[e._v("6")]),n("br"),n("span",{staticClass:"line-number"},[e._v("7")]),n("br"),n("span",{staticClass:"line-number"},[e._v("8")]),n("br"),n("span",{staticClass:"line-number"},[e._v("9")]),n("br"),n("span",{staticClass:"line-number"},[e._v("10")]),n("br"),n("span",{staticClass:"line-number"},[e._v("11")]),n("br"),n("span",{staticClass:"line-number"},[e._v("12")]),n("br"),n("span",{staticClass:"line-number"},[e._v("13")]),n("br")])]),n("ul",[n("li",[e._v("在 Fedora 或者 CentOS/RHEL 中")])]),e._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("$ sudo yum install git\n$ git clone git://github.com/VitaliyRodnenko/geeknote.git\n$ cd geeknote\n$ sudo python setup.py install\n")])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br"),n("span",{staticClass:"line-number"},[e._v("2")]),n("br"),n("span",{staticClass:"line-number"},[e._v("3")]),n("br"),n("span",{staticClass:"line-number"},[e._v("4")]),n("br")])]),n("ul",[n("li",[e._v("在 Arch Linux 中\n对于ArchLinux用户，只需要使用AUR中的包。")])]),e._v(" "),n("h2",{attrs:{id:"geeknote-的基本使用"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#geeknote-的基本使用"}},[e._v("#")]),e._v(" Geeknote 的基本使用")]),e._v(" "),n("blockquote",[n("p",[n("a",{attrs:{href:"http://www.geeknote.me/documentation/",target:"_blank",rel:"noopener noreferrer"}},[e._v("官方文档"),n("OutboundLink")],1)])]),e._v(" "),n("ul",[n("li",[n("p",[e._v("一旦你安装完Geeknote后，你应该将Geeknote与你的Evernote账号关联：\n"),n("code",[e._v("$ geeknote login")]),e._v("\n接着输入你的email地址、密码和你的二步验证码。如果你没有后者的话，忽略它并按下回车。")])]),e._v(" "),n("li",[n("p",[e._v("设置你最喜欢的文本编辑器：\n"),n("code",[e._v("$ geeknote settings --editor vim")])])])]),e._v(" "),n("hr"),e._v(" "),n("ul",[n("li",[e._v("然后，一般创建一条新笔记的语法是：\n"),n("code",[e._v("$ geeknote create --title [title of the new note](--content [content]--tags [comma-separated tags]--notebook [comma-separated notebooks])")]),e._v("\n上面的命令中，只有‘title’是必须的，它会与一条新笔记的标题相关联。其他的标注可以为笔记添加额外的元数据：添加标签来与你的笔记关联、指定放在那个笔记本里。同样，如果你的标题或者内容中有空格，不要忘记将它们放在引号中。\n"),n("code",[e._v('$ geeknote create --title "My note"--content "This is a test note"--tags "finance, business, important"--notebook "Family"')])])]),e._v(" "),n("hr"),e._v(" "),n("ul",[n("li",[n("p",[e._v("然后，你可以编辑你的笔记。语法很相似：\n"),n("code",[e._v("$ geeknote edit --note [title of the note to edit](--title [new title]--tags [new tags]--notebook [new notebooks])")])])]),e._v(" "),n("li",[n("p",[e._v("注意可选的参数如新的标题、标签和笔记本，用来修改笔记的元数据。你也可以用下面的命令重命名笔记：\n"),n("code",[e._v("$ geeknote edit --note [old title]--title [new title]")])])])]),e._v(" "),n("hr"),e._v(" "),n("p",[e._v("现在基本的创建和编辑已经完成了，更高级的特性是搜索和删除。你可以下面的语法搜索你的笔记：\n"),n("code",[e._v("$ geeknote find --search [text-to-search]--tags [comma-separated tags]--notebook [comma-separated notebooks]--date [date-or-date-range]--content-search")]),e._v('\n默认地上面的命令会通过标题搜索笔记。 用"--content-search"选项，就可以按内容搜索。\n比如：\n'),n("code",[e._v('$ geeknote find --search "*restaurant"--notebooks "Family"--date 31.03.2014-31.08.2014')])]),e._v(" "),n("hr"),e._v(" "),n("p",[e._v("显示指定标题的笔记：\n"),n("code",[e._v("$ geeknote show [title]")])]),e._v(" "),n("p",[e._v("我最喜欢使用的一个技巧是使用：\n"),n("code",[e._v('$ geeknote show "*"')]),e._v("\n这会显示所有的笔记并允许你在这中选择一个。")]),e._v(" "),n("hr"),e._v(" "),n("p",[e._v("删除一条笔记：\n"),n("code",[e._v("$ geeknote remove --note [title]")]),e._v("\n小心这是真正的删除。它会从云存储中删除这条笔记。")]),e._v(" "),n("hr"),e._v(" "),n("p",[e._v("最后有很多的选项来管理标签和笔记本。我想最有用的就是显示笔记本列表。\n"),n("code",[e._v("$ geeknote notebook-list")])]),e._v(" "),n("p",[e._v("下面的命令非常相像。你可以猜到，可以用下面的命令列出所有的标签：\n"),n("code",[e._v("$ geeknote tag-list")])]),e._v(" "),n("p",[e._v("创建一个笔记本：\n$ geeknote notebook-create --title [notebook title]\n创建一个标签：")]),e._v(" "),n("p",[n("code",[e._v("$ geeknote tag-create --title [tag title]")]),e._v("\n一旦你了解了窍门，很明显这些语法是非常自然明确的。")]),e._v(" "),n("h2",{attrs:{id:"gnsync工具"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#gnsync工具"}},[e._v("#")]),e._v(" gnsync工具")]),e._v(" "),n("p",[e._v("Geeknote自带的gnsync工具可以让你在Evernote和本地计算机之间同步。不过，我发现它的语法有点枯燥：")]),e._v(" "),n("p",[n("code",[e._v("$ gnsync --path [where to sync](--mask [what kind of file to sync]--format [in which format]--logpath [where to write the log]--notebook [which notebook to use])")])]),e._v(" "),n("p",[e._v("下面是这些参数的意义：")]),e._v(" "),n("p",[e._v('--path /home/adrien/Documents/notes/: 与Evernote同步笔记的位置。\n--mask "*.txt": 只同步纯文本文件。默认gnsync会尝试同步所有文件。\n--format markdown: 你希望它们是纯文本或者markdown格式（默认是纯文本）。\n--logpath /home/adrien/gnsync.log: 同步日志的位置。为防出错，gnsync会在那里写入日志信息。\n--notebook "Family": 同步哪个笔记本中的笔记。如果留空，程序会创建一个以你同步文件夹命令的笔记本。')]),e._v(" "),n("blockquote",[n("p",[e._v("总的来说，Geeknote是一款漂亮的Evernote的命令行客户端。我个人不常使用Evernote，但它仍然很漂亮和有用。命令行一方面让它变得很极客且很容易与shell脚本结合。此外，在Git上还有Geeknote的一个分支项目，在ArchLinux AUR上称为"),n("a",{attrs:{href:"https://aur.archlinux.org/packages/geeknote-improved-git/",target:"_blank",rel:"noopener noreferrer"}},[e._v("geeknote-improved-git"),n("OutboundLink")],1),e._v("，貌似它有更多的特性和比其他分支更积极的开发。我觉得值得去看看。")])]),e._v(" "),n("h1",{attrs:{id:"markdown-supported-list"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#markdown-supported-list"}},[e._v("#")]),e._v(" markdown supported[^list]")]),e._v(" "),n("ul",[n("li",[e._v("将Markdown转化为docx\n这时需要安装pandoc，然后运行如下命令即可：\n"),n("code",[e._v("pandoc -o hello.docx hello.md")])])]),e._v(" "),n("h2",{attrs:{id:"markdown-preview-vim"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#markdown-preview-vim"}},[e._v("#")]),e._v(" markdown-preview.vim")]),e._v(" "),n("blockquote",[n("p",[e._v("https://github.com/iamcco/markdown-preview.vim")])]),e._v(" "),n("p",[e._v("用 vim 打开 md 文件，执行\n"),n("code",[e._v("MarkdownPreview")]),e._v(" 打开浏览窗口\n"),n("code",[e._v("MarkdownPreviewStop")]),e._v(" 关闭浏览窗口")]),e._v(" "),n("p",[e._v("注：mac 电脑使用 chrome 浏览器，需设置")]),e._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('let g:mkdp_path_to_chrome = "open -a Google\\\\ Chrome"\n" or\nlet g:mkdp_path_to_chrome = "/Applications/Google\\\\ Chrome.app/Contents/MacOS/Google\\\\ \n')])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br"),n("span",{staticClass:"line-number"},[e._v("2")]),n("br"),n("span",{staticClass:"line-number"},[e._v("3")]),n("br")])]),n("h2",{attrs:{id:"vim-markdown"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#vim-markdown"}},[e._v("#")]),e._v(" vim-markdown")]),e._v(" "),n("blockquote",[n("p",[e._v("https://github.com/plasticboy/vim-markdown")])]),e._v(" "),n("h2",{attrs:{id:"vim-markdown-toc自动添加toc目录"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#vim-markdown-toc自动添加toc目录"}},[e._v("#")]),e._v(" vim-markdown-toc自动添加toc目录")]),e._v(" "),n("blockquote",[n("p",[e._v("http://mazhuang.org/2015/12/19/vim-markdown-toc/#%E7%94%9F%E6%88%90-table-of-contents\nhttps://github.com/mzlogin/vim-markdown-toc")])]),e._v(" "),n("p",[e._v("生成 Table of Contents\n将光标移动到想在后面插入 Table of Contents 的那一行，然后运行下面的某个命令：")]),e._v(" "),n("p",[e._v(":GenTocGFM\t\n生成 GFM 链接风格的 Table of Contents。\n适用于 GitHub 仓库里的 Markdown 文件，比如 README.md，也适用用于生成 GitBook 的 Markdown 文件。")]),e._v(" "),n("p",[e._v(":GenTocRedcarpet\n生成 Redcarpet 链接风格的 Table of Contents。\n适用于使用 Redcarpet 作为 Markdown 引擎的 Jekyll 项目或其它地方。")]),e._v(" "),n("p",[e._v("更新已存在的 Table of Contents\n通常不需要手动做这件事，保存文件时会自动更新已经存在的 Table of Contents。\n除非是在配置里关闭了保存时自动更新，\n"),n("strong",[e._v("并且维持插入 Table of Contents 前后的 ")]),e._v("，此时可使用 :UpdateToc 命令手动更新。")]),e._v(" "),n("p",[e._v("删除 Table of Contents\n:RemoveToc 命令可以帮你删除本插件生成的 Table of Contents。")]),e._v(" "),n("h2",{attrs:{id:"通过tagbar呈现"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#通过tagbar呈现"}},[e._v("#")]),e._v(" 通过tagbar呈现")]),e._v(" "),n("p",[e._v("https://github.com/jszakmeister/markdown2ctags")]),e._v(" "),n("h1",{attrs:{id:"ycm-youcompleteme-list"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#ycm-youcompleteme-list"}},[e._v("#")]),e._v(" YCM(YouCompleteMe)[^list]")]),e._v(" "),n("blockquote",[n("p",[e._v("https://github.com/Valloric/YouCompleteMe\nhttps://www.jianshu.com/p/d908ce81017a")])]),e._v(" "),n("h2",{attrs:{id:"工具准备"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#工具准备"}},[e._v("#")]),e._v(" 工具准备")]),e._v(" "),n("ul",[n("li",[n("a",{attrs:{href:"https://www.linuxprobe.com/vim8-0-linux.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("安装vim最新版"),n("OutboundLink")],1)])]),e._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("sudo add-apt-repository ppa:jonathonf/vim\nsudo apt update\nsudo apt install vim\n")])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br"),n("span",{staticClass:"line-number"},[e._v("2")]),n("br"),n("span",{staticClass:"line-number"},[e._v("3")]),n("br")])]),n("ul",[n("li",[e._v("或者自己编译安装")])]),e._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("1. 获取Vim仓库：   \n\n　　git clone https://github.com/vim/vim.git \n\n2. 升级到最新的版本：\n\n　　cd vim\n\n　　git pull \n\n3. 安装：\n\n　　cd src\n\n　　make distclean #如果你以前编译过Vim\n\n　　make\n\n　　sudo make install\n\n \n\n错误解决： \n\n　　报错：checking for tgetent()... configure: error: NOT FOUND!\n\n　　　　　You need to install a terminal library; for example ncurses.\n　　解决方法：sudo apt-get install libncurses5-dev\n\n \n\n　　\n\nVim卸载方法（Ubuntu）：\n\n　　sudo apt-get remove --purge vim (--purge 是完全删除，会连配置文件一起删除)\n\n　　suso apt-get clean \n\n\n \n\n获得python支持，编译时得加入参数\n\n./configure --with-features=huge --enable-python3interp --enable-pythoninterp --with-python-config-dir=/usr/lib/python2.7/config-x86_64-linux-gnu/ --enable-rubyinterp --enable-luainterp --enable-perlinterp --with-python3-config-dir=/usr/lib/python3.5/config-3.5m-x86_64-linux-gnu/ --enable-multibyte --enable-cscope      --prefix=/usr/local/vim/\n\n参数说明如下：\n\n--with-features=huge：支持最大特性\n--enable-rubyinterp：打开对ruby编写的插件的支持\n--enable-pythoninterp：打开对python编写的插件的支持\n--enable-python3interp：打开对python3编写的插件的支持\n--enable-luainterp：打开对lua编写的插件的支持\n--enable-perlinterp：打开对perl编写的插件的支持\n--enable-multibyte：打开多字节支持，可以在Vim中输入中文\n--enable-cscope：打开对cscope的支持\n--with-python-config-dir=/usr/lib/python2.7/config-x86_64-linux-gnu/ 指定python 路径\n--with-python-config-dir=/usr/lib/python3.5/config-3.5m-x86_64-linux-gnu/ 指定python3路径\n\n--prefix=/usr/local/vim：指定将要安装到的路径(自行创建)\n\n")])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br"),n("span",{staticClass:"line-number"},[e._v("2")]),n("br"),n("span",{staticClass:"line-number"},[e._v("3")]),n("br"),n("span",{staticClass:"line-number"},[e._v("4")]),n("br"),n("span",{staticClass:"line-number"},[e._v("5")]),n("br"),n("span",{staticClass:"line-number"},[e._v("6")]),n("br"),n("span",{staticClass:"line-number"},[e._v("7")]),n("br"),n("span",{staticClass:"line-number"},[e._v("8")]),n("br"),n("span",{staticClass:"line-number"},[e._v("9")]),n("br"),n("span",{staticClass:"line-number"},[e._v("10")]),n("br"),n("span",{staticClass:"line-number"},[e._v("11")]),n("br"),n("span",{staticClass:"line-number"},[e._v("12")]),n("br"),n("span",{staticClass:"line-number"},[e._v("13")]),n("br"),n("span",{staticClass:"line-number"},[e._v("14")]),n("br"),n("span",{staticClass:"line-number"},[e._v("15")]),n("br"),n("span",{staticClass:"line-number"},[e._v("16")]),n("br"),n("span",{staticClass:"line-number"},[e._v("17")]),n("br"),n("span",{staticClass:"line-number"},[e._v("18")]),n("br"),n("span",{staticClass:"line-number"},[e._v("19")]),n("br"),n("span",{staticClass:"line-number"},[e._v("20")]),n("br"),n("span",{staticClass:"line-number"},[e._v("21")]),n("br"),n("span",{staticClass:"line-number"},[e._v("22")]),n("br"),n("span",{staticClass:"line-number"},[e._v("23")]),n("br"),n("span",{staticClass:"line-number"},[e._v("24")]),n("br"),n("span",{staticClass:"line-number"},[e._v("25")]),n("br"),n("span",{staticClass:"line-number"},[e._v("26")]),n("br"),n("span",{staticClass:"line-number"},[e._v("27")]),n("br"),n("span",{staticClass:"line-number"},[e._v("28")]),n("br"),n("span",{staticClass:"line-number"},[e._v("29")]),n("br"),n("span",{staticClass:"line-number"},[e._v("30")]),n("br"),n("span",{staticClass:"line-number"},[e._v("31")]),n("br"),n("span",{staticClass:"line-number"},[e._v("32")]),n("br"),n("span",{staticClass:"line-number"},[e._v("33")]),n("br"),n("span",{staticClass:"line-number"},[e._v("34")]),n("br"),n("span",{staticClass:"line-number"},[e._v("35")]),n("br"),n("span",{staticClass:"line-number"},[e._v("36")]),n("br"),n("span",{staticClass:"line-number"},[e._v("37")]),n("br"),n("span",{staticClass:"line-number"},[e._v("38")]),n("br"),n("span",{staticClass:"line-number"},[e._v("39")]),n("br"),n("span",{staticClass:"line-number"},[e._v("40")]),n("br"),n("span",{staticClass:"line-number"},[e._v("41")]),n("br"),n("span",{staticClass:"line-number"},[e._v("42")]),n("br"),n("span",{staticClass:"line-number"},[e._v("43")]),n("br"),n("span",{staticClass:"line-number"},[e._v("44")]),n("br"),n("span",{staticClass:"line-number"},[e._v("45")]),n("br"),n("span",{staticClass:"line-number"},[e._v("46")]),n("br"),n("span",{staticClass:"line-number"},[e._v("47")]),n("br"),n("span",{staticClass:"line-number"},[e._v("48")]),n("br"),n("span",{staticClass:"line-number"},[e._v("49")]),n("br"),n("span",{staticClass:"line-number"},[e._v("50")]),n("br"),n("span",{staticClass:"line-number"},[e._v("51")]),n("br"),n("span",{staticClass:"line-number"},[e._v("52")]),n("br"),n("span",{staticClass:"line-number"},[e._v("53")]),n("br"),n("span",{staticClass:"line-number"},[e._v("54")]),n("br"),n("span",{staticClass:"line-number"},[e._v("55")]),n("br"),n("span",{staticClass:"line-number"},[e._v("56")]),n("br"),n("span",{staticClass:"line-number"},[e._v("57")]),n("br"),n("span",{staticClass:"line-number"},[e._v("58")]),n("br"),n("span",{staticClass:"line-number"},[e._v("59")]),n("br"),n("span",{staticClass:"line-number"},[e._v("60")]),n("br"),n("span",{staticClass:"line-number"},[e._v("61")]),n("br")])]),n("ul",[n("li",[e._v("确保python头文件已安装\n编译vim插件支持python和python3，如果只使用系统自带的python可能存在问题，就是编译vim时，vim会自动去寻找/usr/lib/python3/config 会找不到，所以重新安装一遍python。\n"),n("code",[e._v("vim --version")]),e._v("//查看vim版本")])]),e._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("sudo apt-get install python-dev\nsudo apt-get install python3-dev\n")])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br"),n("span",{staticClass:"line-number"},[e._v("2")]),n("br")])]),n("ul",[n("li",[e._v("确保支持 python 2/3 脚本\n"),n("code",[e._v(":echo has('python') || has('python3')")]),e._v("\n若结果是 1 则证明是支持的\n(建议先给python设置路径，暂时python设置为2,回头再设置为自动模式)")]),e._v(" "),n("li",[e._v("安装cmake\n"),n("code",[e._v("sudo apt-get install build-essential cmake")])])]),e._v(" "),n("hr"),e._v(" "),n("ul",[n("li",[e._v("通过 Vundle 来安装 YCM（官方推荐）")])]),e._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("call vundle#begin()\n. . . \nPlugin 'Valloric/YouCompleteMe’\n. . .\ncall vundle#end()\n")])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br"),n("span",{staticClass:"line-number"},[e._v("2")]),n("br"),n("span",{staticClass:"line-number"},[e._v("3")]),n("br"),n("span",{staticClass:"line-number"},[e._v("4")]),n("br"),n("span",{staticClass:"line-number"},[e._v("5")]),n("br")])]),n("p",[e._v("然后保存运行 vim 命令 :PluginInstall 安装 需要特别注意的是这个时候可能等的时间会相当的长\n使用Vundle安装YCM时，如果出现"),n("code",[e._v("YouCompleteMe unavailable: No module named 'future'")]),e._v("错误，可以运行下面的命令来解决。")]),e._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("cd ~/.vim/bundle/YouCompleteMe\ngit submodule update --init --recursive\n")])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br"),n("span",{staticClass:"line-number"},[e._v("2")]),n("br")])]),n("ul",[n("li",[e._v("通过 Git 安装 YCM\n如果等待 Vundle 安装 YCM 等了好久终于貌似好像成功了，打开 vim 却发现 YouCompleteme unavailable : no module named future （当然没有遇到算你运气好），那么你应该考虑一下换用 Git 来安装 YCM：")])]),e._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("# 下载 （在 `～/.vim/bundle` 目录下）\n$ git clone --recursive [https://github.com/Valloric/YouCompleteMe.git](https://github.com/Valloric/YouCompleteMe.git)\n# 检查完整性（在 `～/.vim/bundle/YouCompleteMe` 目录下）\n$ git submodule update --init --recursive\n")])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br"),n("span",{staticClass:"line-number"},[e._v("2")]),n("br"),n("span",{staticClass:"line-number"},[e._v("3")]),n("br"),n("span",{staticClass:"line-number"},[e._v("4")]),n("br")])]),n("h2",{attrs:{id:"python编译安装ycm"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#python编译安装ycm"}},[e._v("#")]),e._v(" python编译安装YCM")]),e._v(" "),n("h3",{attrs:{id:"ubuntu"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#ubuntu"}},[e._v("#")]),e._v(" ubuntu")]),e._v(" "),n("ul",[n("li",[n("p",[e._v("Install development tools and CMake:\n"),n("code",[e._v("sudo apt-get install build-essential cmake")])])]),e._v(" "),n("li",[n("p",[e._v("Note: On older systems (e.g. Ubuntu 14.04) you may run into compilation issues with cmake. Therefore, install the following instead:\n"),n("code",[e._v("sudo apt-get install build-essential cmake3")])])]),e._v(" "),n("li",[n("p",[e._v("Make sure you have Python headers installed:\n"),n("code",[e._v("sudo apt-get install python-dev python3-dev")])])]),e._v(" "),n("li",[n("p",[e._v("compile YCM")])])]),e._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("//Compiling YCM with semantic support for C-family languages:\ncd ~/.vim/bundle/YouCompleteMe\n./install.py --clang-completer\n\n//Compiling YCM without semantic support for C-family languages:\ncd ~/.vim/bundle/YouCompleteMe\n./install.py\n")])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br"),n("span",{staticClass:"line-number"},[e._v("2")]),n("br"),n("span",{staticClass:"line-number"},[e._v("3")]),n("br"),n("span",{staticClass:"line-number"},[e._v("4")]),n("br"),n("span",{staticClass:"line-number"},[e._v("5")]),n("br"),n("span",{staticClass:"line-number"},[e._v("6")]),n("br"),n("span",{staticClass:"line-number"},[e._v("7")]),n("br")])]),n("ul",[n("li",[n("p",[e._v("The following additional language support options are available:")])]),e._v(" "),n("li",[n("p",[e._v("C# support: install Mono and add --cs-completer when calling ./install.py.")])]),e._v(" "),n("li",[n("p",[e._v("Go support: install Go and add --go-completer when calling ./install.py.")])]),e._v(" "),n("li",[n("p",[e._v("TypeScript support: install Node.js and npm then install the TypeScript SDK with npm install -g typescript.")])]),e._v(" "),n("li",[n("p",[e._v("JavaScript support: install Node.js and npm and add --js-completer when calling ./install.py.")])]),e._v(" "),n("li",[n("p",[e._v("Rust support: install Rust and add --rust-completer when calling ./install.py.")])]),e._v(" "),n("li",[n("p",[e._v("Java support: install JDK8 (version 8 required) and add --java-completer when calling ./install.py.")])]),e._v(" "),n("li",[n("p",[e._v("To simply compile with everything enabled, there's a --all flag. So, to install with all language features, ensure xbuild, go, tsserver, node, npm, rustc, and cargo tools are installed and in your PATH, then simply run:")])])]),e._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("cd ~/.vim/bundle/YouCompleteMe\n./install.py --all\n")])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br"),n("span",{staticClass:"line-number"},[e._v("2")]),n("br")])]),n("hr"),e._v(" "),n("ul",[n("li",[e._v("正常来说,YCM会去下载clang的包，如果已经有，也可以用系统--system-libclang。")]),e._v(" "),n("li",[e._v("可使用 ./install.py --help 查看支持哪些补全")]),e._v(" "),n("li",[e._v("如果不需要c-family的补全，可以去掉--clang-completer。如果需要c#的补全，请加上--omnisharp-completer。")]),e._v(" "),n("li",[e._v("可直接使用参数--all 加上所有的补全，包括(c/c++ go c# php等)")]),e._v(" "),n("li",[e._v("若提示需要安装YouCompleteMe子模块，需要运行"),n("code",[e._v("git submodule update --init --recursive")]),e._v("，然后再执行安装命令 ./install.py [options]")])]),e._v(" "),n("h2",{attrs:{id:"编译与构建构建-ycm-core-库-语义补全支持"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#编译与构建构建-ycm-core-库-语义补全支持"}},[e._v("#")]),e._v(" 编译与构建构建 ycm_core 库(语义补全支持)")]),e._v(" "),n("h3",{attrs:{id:"clang"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#clang"}},[e._v("#")]),e._v(" Clang")]),e._v(" "),n("p",[e._v("YCM 的顶层目录或者说根目录应该是 ～/.vim/bundle/YouCompleteMe\n0. 下载安装最新版的 libclang\n如果不需要 C 家族的语义化补全，则可跳过这一步\n"),n("code",[e._v("# apt-get install llvm-3.9 clang-3.9 libclang-3.9-dev libboost-all-dev")])]),e._v(" "),n("ol",[n("li",[e._v("创建一个目录放编译过程中产生的文件`")])]),e._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("$ mkdir ~/.ycm_build\n$ cd ~/.ycm_build\n")])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br"),n("span",{staticClass:"line-number"},[e._v("2")]),n("br")])]),n("ol",{attrs:{start:"2"}},[n("li",[e._v("生成 makefile\n下一步生成makefile，这一步很重要，有点复杂。")])]),e._v(" "),n("p",[e._v("如果跳过第三步不需要C族语言的语义支持的话，在.ycm_build目录下执行")]),e._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('$ cmake -G "Unix Makefiles" . ~/.vim/bundle/YouCompleteMe/third_party/ycmd/cpp\n')])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br")])]),n("hr"),e._v(" "),n("p",[e._v("如果没有跳过第三步，说明需要 c 家族的语义化补全则需运行\n还得分几种情况：")]),e._v(" "),n("p",[e._v("（0）如果前面编译安装ycm_core时已经加了"),n("code",[e._v("--system-libclang")]),e._v("参数或已经自动下载（默认时ubuntu的libclang.so）构建完毕,下面可以省略")]),e._v(" "),n("p",[e._v("（1）假如你从llvm的官网下载了LLVM+Clang，然后解压到：~/ycm_temp/llvm_root_dir （该目录下有 bin, lib, include 等文件夹），然后执行：\n"),n("code",[e._v(':~/.ycm_build$ cmake -G "Unix Makefiles" -DPATH_TO_LLVM_ROOT=~/ycm_temp/llvm_root_dir ~/.vim/bundle/YouCompleteMe/cpp')])]),e._v(" "),n("p",[e._v("Fedora:\n"),n("code",[e._v('cmake -G "Unix Makefiles" -DPATH_TO_LLVM_ROOT=~/ycm_temp/llvm_root_dir/clang+llvm-6.0.0-x86_64-linux-gnu-Fedora27 ~/.vim/bundle/YouCompleteMe/third_party/ycmd/cpp')]),e._v("\n（2）如果想用系统的libclang：\n"),n("code",[e._v('$ cmake -G "Unix Makefiles" -DUSE_SYSTEM_BOOST=ON　-DCMAKE_EXPORT_COMPILE_COMMANDS=ON -DEXTERNAL_LIBCLANG_PATH=/usr/lib/x86_64-linux-gnu/libclang-3.9.so . ~/.vim/bundle/YouCompleteMe/third_party/ycmd/cpp')])]),e._v(" "),n("p",[n("code",[e._v('$ cmake -G "Unix Makefiles" -DUSE_SYSTEM_BOOST=ON　-DCMAKE_EXPORT_COMPILE_COMMANDS=ON -DEXTERNAL_LIBCLANG_PATH=/usr/lib64/libclang.so . ~/.vim/bundle/YouCompleteMe/third_party/ycmd/cpp')])]),e._v(" "),n("p",[e._v("-DEXTERNAL_LIBCLANG_PATH=\t\t//添加语义库的路径和支持，可能默认使用的是外部的 libclang-3.6 ，系统安装的 libclang 最低应要是 3.9")]),e._v(" "),n("p",[e._v("~/.vim/bundle/YouCompleteMe/third_party/ycmd/cpp\t\t//CMakeLists.txt.也有可能直接在third_parth/ycmd/ 文件夹中")]),e._v(" "),n("ul",[n("li",[e._v("如果报错"),n("code",[e._v("Unable to find the Boost header files")]),e._v(" "),n("ul",[n("li",[e._v("首先去判断是否已经有文件存在.\n"),n("code",[e._v("locate boost_system")])]),e._v(" "),n("li",[e._v("结果:"),n("code",[e._v("/usr/lib/x86_64-linux-gnu/libboost_system.so.1.54.0")])]),e._v(" "),n("li",[e._v("说明已经有这个文件存在,只是编译的时候找不到.")]),e._v(" "),n("li",[e._v("切换到/usr/lib/x86_64-linux-gnu/,列出boost开头的lib文件:ls libboost*")])])])]),e._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("libboost_date_time.so.1.54.0        libboost_system.so.1.54.0\nlibboost_iostreams.so.1.54.0        libboost_thread.so.1.54.0\n")])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br"),n("span",{staticClass:"line-number"},[e._v("2")]),n("br")])]),n("p",[e._v("我们发现,已经有system,date_time,iostream,thread,但是没有filesystem和chrono.")]),e._v(" "),n("ul",[n("li",[e._v("直接建立一个链接:")])]),e._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("sudo ln -s libboost_system.so.1.54.0 libboost_system.so\n")])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br")])]),n("ul",[n("li",[e._v("没有的去下载安装")])]),e._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("sudo apt-get install libboost-filesystem\n\n//not found\napt-cache search boost-system \napt-cache search libboost\n")])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br"),n("span",{staticClass:"line-number"},[e._v("2")]),n("br"),n("span",{staticClass:"line-number"},[e._v("3")]),n("br"),n("span",{staticClass:"line-number"},[e._v("4")]),n("br"),n("span",{staticClass:"line-number"},[e._v("5")]),n("br")])]),n("ul",[n("li",[e._v("（3）如果想用自定义的libclang：\n"),n("code",[e._v(':~/.ycm_build$ cmake -G "Unix Makefiles" -DEXTERNAL_LIBCLANG_PATH=/path/to/libclang.so ~/.vim/bundle/YouCompleteMe/cpp')]),n("br"),e._v("\n/path/to/libclang.so这部分填入你自己的路径。")])]),e._v(" "),n("p",[e._v("编译的结果是之前新建的目录（也就是当前目录下生成了一些 Makefile 文件）")]),e._v(" "),n("ol",{attrs:{start:"3"}},[n("li",[e._v("构建 ycm_core")])]),e._v(" "),n("p",[e._v("这个构建选项进针对 Windows")]),e._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("#  --config Release \n$ cmake --build . --target ycm_core --config Release\n")])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br"),n("span",{staticClass:"line-number"},[e._v("2")]),n("br")])]),n("h2",{attrs:{id:"配置vimrc文件"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#配置vimrc文件"}},[e._v("#")]),e._v(" 配置vimrc文件")]),e._v(" "),n("p",[e._v("复制转移 .ycm_extra_conf.py 文件")]),e._v(" "),n("ul",[n("li",[n("p",[e._v("如果想要完全自定义，可以从头开始定义模板文件\n"),n("code",[e._v("$ cp ~/.vim/bundle/YouCompleteMe/third_party/ycmd/examples/.ycm_extra_conf.py ~/.vim/")])])]),e._v(" "),n("li",[n("p",[n("code",[e._v("/home/blinderjay/.vim/bundle/YouCompleteMe/third_party/ycmd/.ycm_extra_conf.py")]),e._v("此文件是编译时自动修改过得，可以直接用")])])]),e._v(" "),n("p",[e._v("添加 vim 配置\n注意下面的 python 解释器的路径要和编译 ycm_core 的时候使用的 python 解释器是相同的版本（2 或\n3）")]),e._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("“ ～/.vimrc\nlet g:ycm_server_python_interpreter='/usr/bin/python'\nlet g:ycm_global_ycm_extra_conf='~/.vim/.ycm_extra_conf.py'\n")])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br"),n("span",{staticClass:"line-number"},[e._v("2")]),n("br"),n("span",{staticClass:"line-number"},[e._v("3")]),n("br")])]),n("h2",{attrs:{id:"测试较错"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#测试较错"}},[e._v("#")]),e._v(" 测试较错")]),e._v(" "),n("ul",[n("li",[e._v("测试安装\n在 vim 中运行 "),n("code",[e._v(":YcmToggleLogs stderr")]),e._v("查看错误日志")])]),e._v(" "),n("p",[e._v("没有看到报错信息，则证明 YCM 已成功安装。")]),e._v(" "),n("ul",[n("li",[e._v("一些错误")])]),e._v(" "),n("ol",[n("li",[n("code",[e._v("The ycmd server SHUT DOWN (restart with :YcmRestartServer). Stderr (last 30 lin es)")]),e._v(" "),n("code",[e._v("python3 ~/.vim/bundle/YouCompleteMe/install.py")]),e._v(" 成功运行一遍就好了, 如果出错的话,提示缺啥装啥就行了")])]),e._v(" "),n("h2",{attrs:{id:"ycm的配置和使用"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#ycm的配置和使用"}},[e._v("#")]),e._v(" YCM的配置和使用")]),e._v(" "),n("p",[n("a",{attrs:{href:"https://github.com/Valloric/YouCompleteMe#options",target:"_blank",rel:"noopener noreferrer"}},[e._v("vimrc配置选项"),n("OutboundLink")],1),e._v("\nYCM可以打开location-list来显示警告和错误的信息"),n("code",[e._v(":YcmDiags")])]),e._v(" "),n("p",[e._v("YouCompleteMe提供的其他功能\nYCM除了提供了基本的补全功能,自动提示错误的功能外,还提供了类似tags的功能：")]),e._v(" "),n("p",[e._v("跳转到定义GoToDefinition\n跳转到声明GoToDeclaration\n以及两者的合体GoToDefinitionElseDeclaration")]),e._v(" "),n("h2",{attrs:{id:"py文件改动-if-necessary"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#py文件改动-if-necessary"}},[e._v("#")]),e._v(" py文件改动(if necessary)")]),e._v(" "),n("p",[e._v("如上所述，YCM在补全时需要ycm_extra_conf.py这个文件，所以我们需要对这个文件进行改动，以满足基本C族语言的补全需要。在~/.vim/bundle/YouCompleteMe/cpp/ycm下找到该文件的模板，在flag里面添加如下内容(系统文件用-isyetem，第三方文件用 -I)：")]),e._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("'-isystem',  \n'/usr/include',  \n'-isystem',  \n'/usr/include/c++/',  \n'-isystem',  \n'/usr/include/i386-linux-gnu/c++'  \n")])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br"),n("span",{staticClass:"line-number"},[e._v("2")]),n("br"),n("span",{staticClass:"line-number"},[e._v("3")]),n("br"),n("span",{staticClass:"line-number"},[e._v("4")]),n("br"),n("span",{staticClass:"line-number"},[e._v("5")]),n("br"),n("span",{staticClass:"line-number"},[e._v("6")]),n("br")])]),n("p",[e._v("如果要让其对C++标准库补全生效，还要把配置文件中的这几行（从try到pass这4行）注释掉：")]),e._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("# NOTE: This is just for YouCompleteMe; it's highly likely that your project  \n# does NOT need to remove the stdlib flag. DO NOT USE THIS IN YOUR  \n# ycm_extra_conf IF YOU'RE NOT 100% SURE YOU NEED IT.  \ntry:  \n  final_flags.remove( '-stdlib=libc++' )  \nexcept ValueError:  \n  pass  \n")])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br"),n("span",{staticClass:"line-number"},[e._v("2")]),n("br"),n("span",{staticClass:"line-number"},[e._v("3")]),n("br"),n("span",{staticClass:"line-number"},[e._v("4")]),n("br"),n("span",{staticClass:"line-number"},[e._v("5")]),n("br"),n("span",{staticClass:"line-number"},[e._v("6")]),n("br"),n("span",{staticClass:"line-number"},[e._v("7")]),n("br")])]),n("p",[e._v("最好先把YCM作者提供的模板备份一下再做改动，然后将改动好的文件就放在原来的位置，作为全局的ycm_extra_conf.py，这样平时写个小Cpp的程序就不需要再单独创建一个。要使之生效，需要在.vimrc里面设置YCM相应的选项，此选项会在下面配置部分详细说明。对于特定的工程，将其拷贝到工程文件夹下，然后在这基础上再修改。不用担心工程文件夹下的ycm_extra_conf.py会和全局的冲突，因为开启vim之后，ycm会现在工程文件夹下搜索该文件，此处的配置文件优先级最高。")]),e._v(" "),n("h2",{attrs:{id:"某人的ycm配置1"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#某人的ycm配置1"}},[e._v("#")]),e._v(" 某人的YCM配置1")]),e._v(" "),n("p",[e._v("在.vimrc文件中添加针对YCM的设置：")]),e._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('"设置error和warning的提示符，如果没有设置，ycm会以syntastic的  \n" g:syntastic_warning_symbol 和 g:syntastic_error_symbol 这两个为准  \nlet g:ycm_error_symbol=\'>>\'  \nlet g:ycm_warning_symbol=\'>*\'  \n[plain] view plain copy\n"设置跳转的快捷键，可以跳转到definition和declaration  \nnnoremap <leader>gc :YcmCompleter GoToDeclaration<CR>  \nnnoremap <leader>gf :YcmCompleter GoToDefinition<CR>  \nnnoremap <leader>gg :YcmCompleter GoToDefinitionElseDeclaration<CR>  \n"nmap <F4> :YcmDiags<CR>  \n[plain] view plain copy\n"设置全局配置文件的路径  \nlet g:ycm_global_ycm_extra_conf = \'~/.vim/bundle/YouCompleteMe/cpp/ycm/.ycm_extra_conf.py\'  \n"开启基于tag的补全，可以在这之后添加需要的标签路径  \nlet g:ycm_collect_identifiers_from_tags_files = 1  \n"开启语义补全  \nlet g:ycm_seed_identifiers_with_syntax = 1  \n"在接受补全后不分裂出一个窗口显示接受的项  \nset completeopt-=preview  \n"不显示开启vim时检查ycm_extra_conf文件的信息  \nlet g:ycm_confirm_extra_conf=0  \n"每次重新生成匹配项，禁止缓存匹配项  \nlet g:ycm_cache_omnifunc=0  \n"在注释中也可以补全  \nlet g:ycm_complete_in_comments=1  \n"输入第一个字符就开始补全  \nlet g:ycm_min_num_of_chars_for_completion=1  \n"不查询ultisnips提供的代码模板补全，如果需要，设置成1即可  \nlet g:ycm_use_ultisnips_completer=0  \n')])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br"),n("span",{staticClass:"line-number"},[e._v("2")]),n("br"),n("span",{staticClass:"line-number"},[e._v("3")]),n("br"),n("span",{staticClass:"line-number"},[e._v("4")]),n("br"),n("span",{staticClass:"line-number"},[e._v("5")]),n("br"),n("span",{staticClass:"line-number"},[e._v("6")]),n("br"),n("span",{staticClass:"line-number"},[e._v("7")]),n("br"),n("span",{staticClass:"line-number"},[e._v("8")]),n("br"),n("span",{staticClass:"line-number"},[e._v("9")]),n("br"),n("span",{staticClass:"line-number"},[e._v("10")]),n("br"),n("span",{staticClass:"line-number"},[e._v("11")]),n("br"),n("span",{staticClass:"line-number"},[e._v("12")]),n("br"),n("span",{staticClass:"line-number"},[e._v("13")]),n("br"),n("span",{staticClass:"line-number"},[e._v("14")]),n("br"),n("span",{staticClass:"line-number"},[e._v("15")]),n("br"),n("span",{staticClass:"line-number"},[e._v("16")]),n("br"),n("span",{staticClass:"line-number"},[e._v("17")]),n("br"),n("span",{staticClass:"line-number"},[e._v("18")]),n("br"),n("span",{staticClass:"line-number"},[e._v("19")]),n("br"),n("span",{staticClass:"line-number"},[e._v("20")]),n("br"),n("span",{staticClass:"line-number"},[e._v("21")]),n("br"),n("span",{staticClass:"line-number"},[e._v("22")]),n("br"),n("span",{staticClass:"line-number"},[e._v("23")]),n("br"),n("span",{staticClass:"line-number"},[e._v("24")]),n("br"),n("span",{staticClass:"line-number"},[e._v("25")]),n("br"),n("span",{staticClass:"line-number"},[e._v("26")]),n("br"),n("span",{staticClass:"line-number"},[e._v("27")]),n("br"),n("span",{staticClass:"line-number"},[e._v("28")]),n("br"),n("span",{staticClass:"line-number"},[e._v("29")]),n("br")])]),n("Ctrl",[e._v("+"),n("Space",[e._v("这个快捷键保留给omniCppCompleter，虽然开启了ycm补全，这个功能依然可用。\n"),n("p",[e._v("更多关于YCM的配置选项和其他信息，查看YCM的帮助文档就好。")]),e._v(" "),n("h2",{attrs:{id:"某人的ycm配置2"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#某人的ycm配置2"}},[e._v("#")]),e._v(" 某人的YCM配置2")]),e._v(" "),n("p",[e._v("使用命令"),n("code",[e._v(":YcmDiags")]),e._v("可以打开location-list查看警告和错误信息。")]),e._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('set completeopt=longest,menu\t"让Vim的补全菜单行为与一般IDE一致(参考VimTip1228)\nautocmd InsertLeave * if pumvisible() == 0|pclose|endif\t"离开插入模式后自动关闭预览窗口\ninoremap <expr> <CR>       pumvisible() ? "\\<C-y>" : "\\<CR>"\t"回车即选中当前项\n"上下左右键的行为 会显示其他信息\ninoremap <expr> <Down>     pumvisible() ? "\\<C-n>" : "\\<Down>"\ninoremap <expr> <Up>       pumvisible() ? "\\<C-p>" : "\\<Up>"\ninoremap <expr> <PageDown> pumvisible() ? "\\<PageDown>\\<C-p>\\<C-n>" : "\\<PageDown>"\ninoremap <expr> <PageUp>   pumvisible() ? "\\<PageUp>\\<C-p>\\<C-n>" : "\\<PageUp>"\n" 跳转到定义处\nnnoremap <leader>jd :YcmCompleter GoToDefinitionElseDeclaration<CR>\nnnoremap <F6> :YcmForceCompileAndDiagnostics<CR>\t"force recomile with syntastic\n" nnoremap <leader>lo :lopen<CR>\t"open locationlist\n" nnoremap <leader>lc :lclose<CR>\t"close locationlist\ninoremap <leader><leader> <C-x><C-o>\nlet g:ycm_global_ycm_extra_conf = \'~/.vim/data/ycm/.ycm_extra_conf.py\'\n" 不显示开启vim时检查ycm_extra_conf文件的信息  \nlet g:ycm_confirm_extra_conf=0\n" 开启基于tag的补全，可以在这之后添加需要的标签路径  \nlet g:ycm_collect_identifiers_from_tags_files=1\n"注释和字符串中的文字也会被收入补全\nlet g:ycm_collect_identifiers_from_comments_and_strings = 0\n" 输入第2个字符开始补全\nlet g:ycm_min_num_of_chars_for_completion=2\n" 禁止缓存匹配项,每次都重新生成匹配项\nlet g:ycm_cache_omnifunc=0\n" 开启语义补全\nlet g:ycm_seed_identifiers_with_syntax=1\t\n"在注释输入中也能补全\nlet g:ycm_complete_in_comments = 1\n"在字符串输入中也能补全\nlet g:ycm_complete_in_strings = 1\n" 设置在下面几种格式的文件上屏蔽ycm\nlet g:ycm_filetype_blacklist = {\n      \\ \'tagbar\' : 1,\n      \\ \'nerdtree\' : 1,\n      \\}\n"youcompleteme  默认tab  s-tab 和 ultisnips 冲突\nlet g:ycm_key_list_select_completion = [\'<Down>\']\nlet g:ycm_key_list_previous_completion = [\'<Up>\']\n" 修改对C函数的补全快捷键，默认是CTRL + space，修改为ALT + ;\nlet g:ycm_key_invoke_completion = \'<M-;>\'\n" SirVer/ultisnips 代码片断\n" Trigger configuration. Do not use <tab> if you use https://github.com/Valloric/YouCompleteMe.\nlet g:UltiSnipsExpandTrigger="<tab>"\nlet g:UltiSnipsJumpForwardTrigger="<tab>"\nlet g:UltiSnipsJumpBackwardTrigger="<s-tab>"\nlet g:UltiSnipsListSnippets="<c-e>"\n"定义存放代码片段的文件夹，使用自定义和默认的，将会的到全局，有冲突的会提示\nlet g:UltiSnipsSnippetDirectories=["bundle/vim-snippets/UltiSnips"]\n" 参考https://github.com/Valloric/YouCompleteMe/issues/36#issuecomment-62941322\n" 解决ultisnips和ycm tab冲突，如果不使用下面的办法解决可以参考\n" https://github.com/Valloric/YouCompleteMe/issues/36#issuecomment-63205056的配置\n" begin\n" let g:ycm_key_list_select_completion=[\'<C-n>\', \'<Down>\']\n" let g:ycm_key_list_previous_completion=[\'<C-p>\', \'<Up>\']\n" let g:UltiSnipsExpandTrigger="<Tab>"\n" let g:UltiSnipsJumpForwardTrigger="<Tab>"                                           \n" let g:UltiSnipsJumpBackwardTrigger="<S-Tab>"\n" end\n" UltiSnips completion function that tries to expand a snippet. If there\'s no\n" snippet for expanding, it checks for completion window and if it\'s\n" shown, selects first element. If there\'s no completion window it tries to\n" jump to next placeholder. If there\'s no placeholder it just returns TAB key \nfunction! g:UltiSnips_Complete()\n    call UltiSnips#ExpandSnippet()\n    if g:ulti_expand_res == 0\n        if pumvisible()\n            return "\\<C-n>"\n        else\n            call UltiSnips#JumpForwards()\n            if g:ulti_jump_forwards_res == 0\n               return "\\<TAB>"\n            endif\n        endif\n    endif\n    return ""\nendfunction\nau BufEnter * exec "inoremap <silent> " . g:UltiSnipsExpandTrigger . " <C-R>=g:UltiSnips_Complete()<cr>"\n" Expand snippet or return\nlet g:ulti_expand_res = 1\nfunction! Ulti_ExpandOrEnter()\n    call UltiSnips#ExpandSnippet()\n    if g:ulti_expand_res\n        return \'\'\n    else\n        return "\\<return>"\nendfunction\n" Set <space> as primary trigger\ninoremap <return> <C-R>=Ulti_ExpandOrEnter()<CR>\n')])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br"),n("span",{staticClass:"line-number"},[e._v("2")]),n("br"),n("span",{staticClass:"line-number"},[e._v("3")]),n("br"),n("span",{staticClass:"line-number"},[e._v("4")]),n("br"),n("span",{staticClass:"line-number"},[e._v("5")]),n("br"),n("span",{staticClass:"line-number"},[e._v("6")]),n("br"),n("span",{staticClass:"line-number"},[e._v("7")]),n("br"),n("span",{staticClass:"line-number"},[e._v("8")]),n("br"),n("span",{staticClass:"line-number"},[e._v("9")]),n("br"),n("span",{staticClass:"line-number"},[e._v("10")]),n("br"),n("span",{staticClass:"line-number"},[e._v("11")]),n("br"),n("span",{staticClass:"line-number"},[e._v("12")]),n("br"),n("span",{staticClass:"line-number"},[e._v("13")]),n("br"),n("span",{staticClass:"line-number"},[e._v("14")]),n("br"),n("span",{staticClass:"line-number"},[e._v("15")]),n("br"),n("span",{staticClass:"line-number"},[e._v("16")]),n("br"),n("span",{staticClass:"line-number"},[e._v("17")]),n("br"),n("span",{staticClass:"line-number"},[e._v("18")]),n("br"),n("span",{staticClass:"line-number"},[e._v("19")]),n("br"),n("span",{staticClass:"line-number"},[e._v("20")]),n("br"),n("span",{staticClass:"line-number"},[e._v("21")]),n("br"),n("span",{staticClass:"line-number"},[e._v("22")]),n("br"),n("span",{staticClass:"line-number"},[e._v("23")]),n("br"),n("span",{staticClass:"line-number"},[e._v("24")]),n("br"),n("span",{staticClass:"line-number"},[e._v("25")]),n("br"),n("span",{staticClass:"line-number"},[e._v("26")]),n("br"),n("span",{staticClass:"line-number"},[e._v("27")]),n("br"),n("span",{staticClass:"line-number"},[e._v("28")]),n("br"),n("span",{staticClass:"line-number"},[e._v("29")]),n("br"),n("span",{staticClass:"line-number"},[e._v("30")]),n("br"),n("span",{staticClass:"line-number"},[e._v("31")]),n("br"),n("span",{staticClass:"line-number"},[e._v("32")]),n("br"),n("span",{staticClass:"line-number"},[e._v("33")]),n("br"),n("span",{staticClass:"line-number"},[e._v("34")]),n("br"),n("span",{staticClass:"line-number"},[e._v("35")]),n("br"),n("span",{staticClass:"line-number"},[e._v("36")]),n("br"),n("span",{staticClass:"line-number"},[e._v("37")]),n("br"),n("span",{staticClass:"line-number"},[e._v("38")]),n("br"),n("span",{staticClass:"line-number"},[e._v("39")]),n("br"),n("span",{staticClass:"line-number"},[e._v("40")]),n("br"),n("span",{staticClass:"line-number"},[e._v("41")]),n("br"),n("span",{staticClass:"line-number"},[e._v("42")]),n("br"),n("span",{staticClass:"line-number"},[e._v("43")]),n("br"),n("span",{staticClass:"line-number"},[e._v("44")]),n("br"),n("span",{staticClass:"line-number"},[e._v("45")]),n("br"),n("span",{staticClass:"line-number"},[e._v("46")]),n("br"),n("span",{staticClass:"line-number"},[e._v("47")]),n("br"),n("span",{staticClass:"line-number"},[e._v("48")]),n("br"),n("span",{staticClass:"line-number"},[e._v("49")]),n("br"),n("span",{staticClass:"line-number"},[e._v("50")]),n("br"),n("span",{staticClass:"line-number"},[e._v("51")]),n("br"),n("span",{staticClass:"line-number"},[e._v("52")]),n("br"),n("span",{staticClass:"line-number"},[e._v("53")]),n("br"),n("span",{staticClass:"line-number"},[e._v("54")]),n("br"),n("span",{staticClass:"line-number"},[e._v("55")]),n("br"),n("span",{staticClass:"line-number"},[e._v("56")]),n("br"),n("span",{staticClass:"line-number"},[e._v("57")]),n("br"),n("span",{staticClass:"line-number"},[e._v("58")]),n("br"),n("span",{staticClass:"line-number"},[e._v("59")]),n("br"),n("span",{staticClass:"line-number"},[e._v("60")]),n("br"),n("span",{staticClass:"line-number"},[e._v("61")]),n("br"),n("span",{staticClass:"line-number"},[e._v("62")]),n("br"),n("span",{staticClass:"line-number"},[e._v("63")]),n("br"),n("span",{staticClass:"line-number"},[e._v("64")]),n("br"),n("span",{staticClass:"line-number"},[e._v("65")]),n("br"),n("span",{staticClass:"line-number"},[e._v("66")]),n("br"),n("span",{staticClass:"line-number"},[e._v("67")]),n("br"),n("span",{staticClass:"line-number"},[e._v("68")]),n("br"),n("span",{staticClass:"line-number"},[e._v("69")]),n("br"),n("span",{staticClass:"line-number"},[e._v("70")]),n("br"),n("span",{staticClass:"line-number"},[e._v("71")]),n("br"),n("span",{staticClass:"line-number"},[e._v("72")]),n("br"),n("span",{staticClass:"line-number"},[e._v("73")]),n("br"),n("span",{staticClass:"line-number"},[e._v("74")]),n("br"),n("span",{staticClass:"line-number"},[e._v("75")]),n("br"),n("span",{staticClass:"line-number"},[e._v("76")]),n("br"),n("span",{staticClass:"line-number"},[e._v("77")]),n("br"),n("span",{staticClass:"line-number"},[e._v("78")]),n("br"),n("span",{staticClass:"line-number"},[e._v("79")]),n("br"),n("span",{staticClass:"line-number"},[e._v("80")]),n("br"),n("span",{staticClass:"line-number"},[e._v("81")]),n("br"),n("span",{staticClass:"line-number"},[e._v("82")]),n("br"),n("span",{staticClass:"line-number"},[e._v("83")]),n("br"),n("span",{staticClass:"line-number"},[e._v("84")]),n("br"),n("span",{staticClass:"line-number"},[e._v("85")]),n("br"),n("span",{staticClass:"line-number"},[e._v("86")]),n("br"),n("span",{staticClass:"line-number"},[e._v("87")]),n("br"),n("span",{staticClass:"line-number"},[e._v("88")]),n("br"),n("span",{staticClass:"line-number"},[e._v("89")]),n("br")])]),n("h2",{attrs:{id:"ycm-eclim"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#ycm-eclim"}},[e._v("#")]),e._v(" YCM & Eclim")]),e._v(" "),n("p",[e._v("YCM配合Eclim可以实现对Java代码的自动提示，首先需要下载Eclim，下载好后执行java -jar eclim_2.4.1.jar，卸载的话，后面再加个参数uninstaller就行。按提示一步步安装就好了，安装好后首先要启动eclimd，它存放在eclipse的根目录下。")]),e._v(" "),n("p",[e._v("对不同的自动补全插件eclim都提供了配置方法，对于YCM我们只需要在vimrc中添加一行let g:EclimCompletionMethod = 'omnifunc'就可以了。")]),e._v(" "),n("p",[e._v("打开vim执行:ProjectCreate /path/to/project -n java创建一个新的工程。这个工程的结构和eclipse类似。:ProjectList命令可以查看工程列表。")]),e._v(" "),n("p",[e._v("这个插件很有意思，可以在eclipse中嵌入vim，又可以在vim中享受eclipse一样的自动补全。对于Java来说，提供了一些以Java，Project，New，Mvn为前缀的命名。可以输入:Java按Tab键尝试一下。不过，我觉得还是使用eclipse配合viPlugin插件更方便些。")]),e._v(" "),n("h2",{attrs:{id:"针对-ycm-extra-conf-py的配置："}},[n("a",{staticClass:"header-anchor",attrs:{href:"#针对-ycm-extra-conf-py的配置："}},[e._v("#")]),e._v(" 针对.ycm_extra_conf.py的配置：")]),e._v(" "),n("p",[e._v("（1）百度贴吧上看到的一个网友写的"),n("a",{attrs:{href:"https://github.com/robturtle/newycm_extra_conf.py",target:"_blank",rel:"noopener noreferrer"}},[e._v("自动生成conf文件的脚本"),n("OutboundLink")],1),e._v("\n（2）"),n("a",{attrs:{href:"http://jesrui.sdf-eu.org/ycm-config-for-qt5.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("针对Qt5的补全的conf"),n("OutboundLink")],1),e._v("\n都是别人写的，可以弄下来，针对自己的情况做些修改，保存在Templates文件夹里面，下次需要的话创建一个就很方便。")]),e._v(" "),n("h1",{attrs:{id:"vim编译安装（ubuntu12-04）-list"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#vim编译安装（ubuntu12-04）-list"}},[e._v("#")]),e._v(" vim编译安装（Ubuntu12.04）[^list]")]),e._v(" "),n("p",[e._v("下载、编译、安装命令如下：")]),e._v(" "),n("p",[e._v("$ git clone https://github.com/vim/vim.git\n$ cd vim/src\n"),n("code",[e._v("$ ./configure --enable-pythoninterp=yes")]),e._v("\n$ make\n$ sudo make installvim\n　　敲入 vim 命令可以看到如下画面：\n"),n("img",{attrs:{src:"http://img.blog.csdn.net/20170805182412041?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvbHVfZW1iZWRkZWQ=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast",alt:"这里写图片描述"}})]),e._v(" "),n("p",[e._v("需要注意的是，这里的 ./configure --enable-pythoninterp=yes 配置是必要的，表示开启 Vim 的 Python2 支持。如果想开启 Python3 支持，则参数应为 --enable-python3interp=yes。\n　　Vim 的默认安装路径是 /usr/local/bin/vim，原来的 Vim 是 /usr/bin/vim，所以 Vim 8.0 和 Vim 7.3 是可以共用的。那为什么输入 vim 执行的是 8.0 版本的而不是 7.3 版本的呢？看看环境变量 PATH 就知道了，因为 /usr/local/bin 的路径在前面嘛！")]),e._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("$ echo $PATH\n/sbin:/usr/sbin:/usr/lib/lightdm/lightdm:/usr/local/bin:/usr/bin:/bin\n")])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br"),n("span",{staticClass:"line-number"},[e._v("2")]),n("br")])]),n("p",[e._v("所以现在的 vim 执行的是 8.0 版本，而 vi 执行的是 7.3 版本。\n　　另外，我们可以通过如下命令来检查 vim 是否已经支持 Python。没有执行./configure --enable-pythoninterp=yes 编译的话是这样的：")]),e._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("$ vim --version | grep python\n+cryptv          +linebreak       +python          +viminfo\n+cscope          +lispindent      -python3         +vreplace\n")])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br"),n("span",{staticClass:"line-number"},[e._v("2")]),n("br"),n("span",{staticClass:"line-number"},[e._v("3")]),n("br")])]),n("p",[e._v("而执行./configure --enable-pythoninterp=yes 之后编译的话是这样的：")]),e._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("$ vim --version | grep python\n+cryptv          +linebreak       +python          +viminfo\n+cscope          +lispindent      -python3         +vreplace\nLinking: gcc   -L/usr/local/lib -Wl,--as-needed -o vim   -lgtk-x11-2.0 -lgdk-x11-2.0 -latk-1.0 -lgio-2.0 -lpangoft2-1.0 -lpangocairo-1.0 -lgdk_pixbuf-2.0 -lcairo -lpango-1.0 -lfreetype -lfontconfig -lgobject-2.0 -lglib-2.0   -lSM -lICE -lXt -lX11 -lXdmcp -lSM -lICE  -lm -ltinfo -lnsl   -ldl    -L/usr/lib/python2.7/config -lpython2.7 -lpthread -ldl -lutil -lm -Xlinker -export-dynamic -Wl,-O1 -Wl,-Bsymbolic-functions\n")])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br"),n("span",{staticClass:"line-number"},[e._v("2")]),n("br"),n("span",{staticClass:"line-number"},[e._v("3")]),n("br"),n("span",{staticClass:"line-number"},[e._v("4")]),n("br")])]),n("h1",{attrs:{id:"vimscript编写-list"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#vimscript编写-list"}},[e._v("#")]),e._v(" vimscript编写[^list]")]),e._v(" "),n("p",[e._v("##文件与目录操作")]),e._v(" "),n("blockquote",[n("p",[e._v("http://www.jb51.net/article/97766.htm")])]),e._v(" "),n("p",[e._v("文件名修饰符的解释\n:help expand()\n或者:h ::p 也行")]),e._v(" "),n("p",[e._v('echo expand("%:r")\t提取文件名而不要扩展名\n获取文件扩展名把 :r 换成 :e，具体看expand帮助')]),e._v(" "),n("ul",[n("li",[n("p",[e._v('当前文件名\n我们知道Vim有48个寄存器，其中%只读寄存器中保存着当前文件路径。 例如在/home/harttle/下打开src/main.cpp，我们打印%的值：\n:echo @%    " 文件路径 src/main.cpp')])]),e._v(" "),n("li",[n("p",[e._v("通过关键字展开可得到绝对路径、所在目录等信息：\n:echo expand('%:t')  \" 文件名  main.cpp\n:echo expand('%:p')  \" 绝对路径 /home/harttle/src/main.cpp\n:echo expand('%:p:h') \" 所在目录 /home/harttle/src\n:echo expand('%:p:h:t') \" 所在目录名 src\n:p理解为path, :h理解为head, :t理解为tail。可参考:help expand。")])]),e._v(" "),n("li",[n("p",[e._v('利用 % 进行文件操作\n备份当前文件main.cpp到main.cpp.bak:\n:w % %.bak\n打开在同目录下的main.h：\n:e %:p:h/main.h\n插入当前文件名：\n"%p\n拷贝当前文件名到剪切板，当然你可以把它做成快捷键：\n:let @*=expand("%:t")')])]),e._v(" "),n("li",[n("p",[e._v('直接打开目录\nHarttle发现Vim不仅可以打开文件，而且可以打开目录。 直接vim /home/harttle即可打开，也可以在vim打开目录：\n:e ./harttle " 编辑该目录\n:Explore .  " 浏览该目录\n:Sexplore .  " 在水平分割窗口中浏览该目录\n:Vexplore .  " 在垂直分割窗口中浏览该目录\n打开目录后Enter进入下一层，-返回上一层，R重命名，D删除。\n这里的水平分割是指上下两个窗口，垂直分割为左右两个窗口。 貌似TMUX和VIM对水平和垂直的定义恰恰相反，Harttle也是醉了。')])]),e._v(" "),n("li",[n("p",[e._v("万能方法\n如果你找不到合适的Vim命令，随时都可以在Vim中直接执行Bash命令。 只需要在Ex模式中添加前导的!字符\n此外，NERDTree插件可以在Vim中显示文件目录树。 当然也集成了文件和目录操作，需要熟悉其快捷键。")])])])])],1)],1)}),[],!1,null,null,null);t.default=s.exports}}]);